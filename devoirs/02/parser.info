-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from parser.y
-----------------------------------------------------------------------------

state 30 contains 13 shift/reduce conflicts.
state 50 contains 13 shift/reduce conflicts.
state 61 contains 1 shift/reduce conflicts.
state 66 contains 13 shift/reduce conflicts.
state 67 contains 1 shift/reduce conflicts.
state 93 contains 13 shift/reduce conflicts.
state 96 contains 1 reduce/reduce conflicts.
state 98 contains 1 reduce/reduce conflicts.
state 106 contains 13 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Statement                         (0)
	Statement -> Definition                            (1)
	Statement -> Expr                                  (2)
	Expr -> 'put that' LetInDefs 'into' Expr           (3)
	Expr -> 'put that' 'into' Expr                     (4)
	Expr -> 'what is' Expr '?' CaseOfs                 (5)
	Expr -> UnaryOp Expr                               (6)
	Expr -> Expr BinaryOp Expr                         (7)
	Expr -> Literal                                    (8)
	Expr -> 'identifier'                               (9)
	Expr -> FunctionApp                                (10)
	Expr -> If                                         (11)
	Expr -> '(' Expr ')'                               (12)
	Definition -> FunctionDef                          (13)
	Definition -> 'this' 'identifier' 'is' Expr        (14)
	FunctionDef -> 'behold' 'identifier' FArgs 'which does' Expr   (15)
	FArgs ->                                           (16)
	FArgs -> 'with' Args                               (17)
	Args -> Arg                                        (18)
	Args -> Args 'and' Arg                             (19)
	Arg -> Type 'identifier'                           (20)
	Arg -> 'identifier' '(' Arg 'and his friend' Arg ')'   (21)
	Type -> 'Integer'                                  (22)
	Type -> 'Boolean'                                  (23)
	Type -> TypeTuple                                  (24)
	TypeTuple -> '(' Type 'and his friend' Type ')'    (25)
	FunctionApp -> 'summon' 'identifier' 'with' FunctionAppArgs   (26)
	FunctionApp -> 'summon' 'identifier'               (27)
	FunctionAppArgs -> FunctionAppArg                  (28)
	FunctionAppArgs -> FunctionAppArgs 'and' FunctionAppArg   (29)
	FunctionAppArg -> Expr                             (30)
	LetInDefs -> Definition                            (31)
	LetInDefs -> LetInDefs 'and' Definition            (32)
	If -> 'suppose' Expr 'then we can conclude' Expr 'rather than' Expr   (33)
	CaseOfs -> CaseOf                                  (34)
	CaseOfs -> CaseOf CaseOfs                          (35)
	CaseOf -> 'perhaps' Pattern 'which does' Expr      (36)
	Pattern -> 'who cares'                             (37)
	Pattern -> 'identifier'                            (38)
	Pattern -> '(' Pattern 'and his friend' Pattern ')'   (39)
	Pattern -> Literal                                 (40)
	Literal -> 'integer'                               (41)
	Literal -> 'yep'                                   (42)
	Literal -> 'pasyep'                                (43)
	Literal -> '(' Expr 'and his friend' Expr ')'      (44)
	UnaryOp -> 'neg'                                   (45)
	UnaryOp -> 'not'                                   (46)
	BinaryOp -> 'plus'                                 (47)
	BinaryOp -> 'minus'                                (48)
	BinaryOp -> 'times'                                (49)
	BinaryOp -> 'split'                                (50)
	BinaryOp -> 'rest'                                 (51)
	BinaryOp -> 'weaker than'                          (52)
	BinaryOp -> 'stronger than'                        (53)
	BinaryOp -> 'as weak as'                           (54)
	BinaryOp -> 'as strong as'                         (55)
	BinaryOp -> 'same as'                              (56)
	BinaryOp -> 'different of'                         (57)
	BinaryOp -> 'both'                                 (58)
	BinaryOp -> 'either'                               (59)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'behold'       { TokenPosn Behold _ _ }
	'summon'       { TokenPosn Summon _ _ }
	'with'         { TokenPosn With _ _ }
	'and'          { TokenPosn AndParam _ _ }
	'this'         { TokenPosn This _ _ }
	'is'           { TokenPosn Is _ _ }
	'('            { TokenPosn LParen _ _ }
	')'            { TokenPosn RParen _ _ }
	'and his friend'{ TokenPosn AndHisFriend _ _ }
	'put that'     { TokenPosn PutThat _ _ }
	'into'         { TokenPosn Into _ _ }
	'what is'      { TokenPosn WhatIs _ _ }
	'?'            { TokenPosn QuestionMark _ _ }
	'perhaps'      { TokenPosn Perhaps _ _ }
	'who cares'    { TokenPosn WhoCares _ _ }
	'which does'   { TokenPosn WhichDoes _ _ }
	'neg'          { TokenPosn Neg _ _ }
	'not'          { TokenPosn Not _ _ }
	'plus'         { TokenPosn Plus _ _ }
	'minus'        { TokenPosn Minus _ _ }
	'times'        { TokenPosn Mult _ _ }
	'split'        { TokenPosn Div _ _ }
	'rest'         { TokenPosn Mod _ _ }
	'weaker than'  { TokenPosn Lesser _ _ }
	'stronger than'{ TokenPosn Greater _ _ }
	'as weak as'   { TokenPosn LesserEq _ _ }
	'as strong as' { TokenPosn GreaterEq _ _ }
	'same as'      { TokenPosn Eq _ _ }
	'different of' { TokenPosn Neq _ _ }
	'both'         { TokenPosn And _ _ }
	'either'       { TokenPosn Or _ _ }
	'yep'          { TokenPosn Truthy _ _ }
	'pasyep'       { TokenPosn Falsy _ _ }
	'identifier'   { TokenPosn (Name $$) _ _ }
	'integer'      { TokenPosn (Integer $$) _ _ }
	'Integer'      { TokenPosn (Type "Integer") _ _ }
	'Boolean'      { TokenPosn (Type "Boolean") _ _ }
	'suppose'      { TokenPosn Suppose _ _ }
	'then we can conclude'{ TokenPosn ThenWeCanConclude _ _ }
	'rather than'  { TokenPosn RatherThan _ _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Statement       rules 1, 2
	Expr            rules 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
	Definition      rules 13, 14
	FunctionDef     rule  15
	FArgs           rules 16, 17
	Args            rules 18, 19
	Arg             rules 20, 21
	Type            rules 22, 23, 24
	TypeTuple       rule  25
	FunctionApp     rules 26, 27
	FunctionAppArgs rules 28, 29
	FunctionAppArg  rule  30
	LetInDefs       rules 31, 32
	If              rule  33
	CaseOfs         rules 34, 35
	CaseOf          rule  36
	Pattern         rules 37, 38, 39, 40
	Literal         rules 41, 42, 43, 44
	UnaryOp         rules 45, 46
	BinaryOp        rules 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . Statement                        (rule 0)

	'behold'       shift, and enter state 4
	'summon'       shift, and enter state 12
	'this'         shift, and enter state 5
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Statement      goto state 6
	Expr           goto state 7
	Definition     goto state 2
	FunctionDef    goto state 3
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 1

	Statement -> . Definition                           (rule 1)

	'behold'       shift, and enter state 4
	'this'         shift, and enter state 5

	Definition     goto state 2
	FunctionDef    goto state 3

State 2

	Statement -> Definition .                           (rule 1)

	%eof           reduce using rule 1


State 3

	Definition -> FunctionDef .                         (rule 13)

	'and'          reduce using rule 13
	'into'         reduce using rule 13
	%eof           reduce using rule 13


State 4

	FunctionDef -> 'behold' . 'identifier' FArgs 'which does' Expr    (rule 15)

	'identifier'   shift, and enter state 46


State 5

	Definition -> 'this' . 'identifier' 'is' Expr       (rule 14)

	'identifier'   shift, and enter state 45


State 6

	%start_parser -> Statement .                        (rule 0)

	%eof           accept


State 7

	Statement -> Expr .                                 (rule 2)
	Expr -> Expr . BinaryOp Expr                        (rule 7)

	'plus'         shift, and enter state 32
	'minus'        shift, and enter state 33
	'times'        shift, and enter state 34
	'split'        shift, and enter state 35
	'rest'         shift, and enter state 36
	'weaker than'  shift, and enter state 37
	'stronger than'shift, and enter state 38
	'as weak as'   shift, and enter state 39
	'as strong as' shift, and enter state 40
	'same as'      shift, and enter state 41
	'different of' shift, and enter state 42
	'both'         shift, and enter state 43
	'either'       shift, and enter state 44
	%eof           reduce using rule 2

	BinaryOp       goto state 31

State 8

	Expr -> FunctionApp .                               (rule 10)

	'and'          reduce using rule 10
	')'            reduce using rule 10
	'and his friend'reduce using rule 10
	'into'         reduce using rule 10
	'?'            reduce using rule 10
	'perhaps'      reduce using rule 10
	'plus'         reduce using rule 10
	'minus'        reduce using rule 10
	'times'        reduce using rule 10
	'split'        reduce using rule 10
	'rest'         reduce using rule 10
	'weaker than'  reduce using rule 10
	'stronger than'reduce using rule 10
	'as weak as'   reduce using rule 10
	'as strong as' reduce using rule 10
	'same as'      reduce using rule 10
	'different of' reduce using rule 10
	'both'         reduce using rule 10
	'either'       reduce using rule 10
	'then we can conclude'reduce using rule 10
	'rather than'  reduce using rule 10
	%eof           reduce using rule 10


State 9

	Expr -> If .                                        (rule 11)

	'and'          reduce using rule 11
	')'            reduce using rule 11
	'and his friend'reduce using rule 11
	'into'         reduce using rule 11
	'?'            reduce using rule 11
	'perhaps'      reduce using rule 11
	'plus'         reduce using rule 11
	'minus'        reduce using rule 11
	'times'        reduce using rule 11
	'split'        reduce using rule 11
	'rest'         reduce using rule 11
	'weaker than'  reduce using rule 11
	'stronger than'reduce using rule 11
	'as weak as'   reduce using rule 11
	'as strong as' reduce using rule 11
	'same as'      reduce using rule 11
	'different of' reduce using rule 11
	'both'         reduce using rule 11
	'either'       reduce using rule 11
	'then we can conclude'reduce using rule 11
	'rather than'  reduce using rule 11
	%eof           reduce using rule 11


State 10

	Expr -> Literal .                                   (rule 8)

	'and'          reduce using rule 8
	')'            reduce using rule 8
	'and his friend'reduce using rule 8
	'into'         reduce using rule 8
	'?'            reduce using rule 8
	'perhaps'      reduce using rule 8
	'plus'         reduce using rule 8
	'minus'        reduce using rule 8
	'times'        reduce using rule 8
	'split'        reduce using rule 8
	'rest'         reduce using rule 8
	'weaker than'  reduce using rule 8
	'stronger than'reduce using rule 8
	'as weak as'   reduce using rule 8
	'as strong as' reduce using rule 8
	'same as'      reduce using rule 8
	'different of' reduce using rule 8
	'both'         reduce using rule 8
	'either'       reduce using rule 8
	'then we can conclude'reduce using rule 8
	'rather than'  reduce using rule 8
	%eof           reduce using rule 8


State 11

	Expr -> UnaryOp . Expr                              (rule 6)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 30
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 12

	FunctionApp -> 'summon' . 'identifier' 'with' FunctionAppArgs    (rule 26)
	FunctionApp -> 'summon' . 'identifier'              (rule 27)

	'identifier'   shift, and enter state 29


State 13

	Expr -> '(' . Expr ')'                              (rule 12)
	Literal -> '(' . Expr 'and his friend' Expr ')'     (rule 44)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 28
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 14

	Expr -> 'put that' . LetInDefs 'into' Expr          (rule 3)
	Expr -> 'put that' . 'into' Expr                    (rule 4)

	'behold'       shift, and enter state 4
	'this'         shift, and enter state 5
	'into'         shift, and enter state 27

	Definition     goto state 25
	FunctionDef    goto state 3
	LetInDefs      goto state 26

State 15

	Expr -> 'what is' . Expr '?' CaseOfs                (rule 5)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 24
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 16

	UnaryOp -> 'neg' .                                  (rule 45)

	'summon'       reduce using rule 45
	'('            reduce using rule 45
	'put that'     reduce using rule 45
	'what is'      reduce using rule 45
	'neg'          reduce using rule 45
	'not'          reduce using rule 45
	'yep'          reduce using rule 45
	'pasyep'       reduce using rule 45
	'identifier'   reduce using rule 45
	'integer'      reduce using rule 45
	'suppose'      reduce using rule 45


State 17

	UnaryOp -> 'not' .                                  (rule 46)

	'summon'       reduce using rule 46
	'('            reduce using rule 46
	'put that'     reduce using rule 46
	'what is'      reduce using rule 46
	'neg'          reduce using rule 46
	'not'          reduce using rule 46
	'yep'          reduce using rule 46
	'pasyep'       reduce using rule 46
	'identifier'   reduce using rule 46
	'integer'      reduce using rule 46
	'suppose'      reduce using rule 46


State 18

	Literal -> 'yep' .                                  (rule 42)

	'and'          reduce using rule 42
	')'            reduce using rule 42
	'and his friend'reduce using rule 42
	'into'         reduce using rule 42
	'?'            reduce using rule 42
	'perhaps'      reduce using rule 42
	'which does'   reduce using rule 42
	'plus'         reduce using rule 42
	'minus'        reduce using rule 42
	'times'        reduce using rule 42
	'split'        reduce using rule 42
	'rest'         reduce using rule 42
	'weaker than'  reduce using rule 42
	'stronger than'reduce using rule 42
	'as weak as'   reduce using rule 42
	'as strong as' reduce using rule 42
	'same as'      reduce using rule 42
	'different of' reduce using rule 42
	'both'         reduce using rule 42
	'either'       reduce using rule 42
	'then we can conclude'reduce using rule 42
	'rather than'  reduce using rule 42
	%eof           reduce using rule 42


State 19

	Literal -> 'pasyep' .                               (rule 43)

	'and'          reduce using rule 43
	')'            reduce using rule 43
	'and his friend'reduce using rule 43
	'into'         reduce using rule 43
	'?'            reduce using rule 43
	'perhaps'      reduce using rule 43
	'which does'   reduce using rule 43
	'plus'         reduce using rule 43
	'minus'        reduce using rule 43
	'times'        reduce using rule 43
	'split'        reduce using rule 43
	'rest'         reduce using rule 43
	'weaker than'  reduce using rule 43
	'stronger than'reduce using rule 43
	'as weak as'   reduce using rule 43
	'as strong as' reduce using rule 43
	'same as'      reduce using rule 43
	'different of' reduce using rule 43
	'both'         reduce using rule 43
	'either'       reduce using rule 43
	'then we can conclude'reduce using rule 43
	'rather than'  reduce using rule 43
	%eof           reduce using rule 43


State 20

	Expr -> 'identifier' .                              (rule 9)

	'and'          reduce using rule 9
	')'            reduce using rule 9
	'and his friend'reduce using rule 9
	'into'         reduce using rule 9
	'?'            reduce using rule 9
	'perhaps'      reduce using rule 9
	'plus'         reduce using rule 9
	'minus'        reduce using rule 9
	'times'        reduce using rule 9
	'split'        reduce using rule 9
	'rest'         reduce using rule 9
	'weaker than'  reduce using rule 9
	'stronger than'reduce using rule 9
	'as weak as'   reduce using rule 9
	'as strong as' reduce using rule 9
	'same as'      reduce using rule 9
	'different of' reduce using rule 9
	'both'         reduce using rule 9
	'either'       reduce using rule 9
	'then we can conclude'reduce using rule 9
	'rather than'  reduce using rule 9
	%eof           reduce using rule 9


State 21

	Literal -> 'integer' .                              (rule 41)

	'and'          reduce using rule 41
	')'            reduce using rule 41
	'and his friend'reduce using rule 41
	'into'         reduce using rule 41
	'?'            reduce using rule 41
	'perhaps'      reduce using rule 41
	'which does'   reduce using rule 41
	'plus'         reduce using rule 41
	'minus'        reduce using rule 41
	'times'        reduce using rule 41
	'split'        reduce using rule 41
	'rest'         reduce using rule 41
	'weaker than'  reduce using rule 41
	'stronger than'reduce using rule 41
	'as weak as'   reduce using rule 41
	'as strong as' reduce using rule 41
	'same as'      reduce using rule 41
	'different of' reduce using rule 41
	'both'         reduce using rule 41
	'either'       reduce using rule 41
	'then we can conclude'reduce using rule 41
	'rather than'  reduce using rule 41
	%eof           reduce using rule 41


State 22

	If -> 'suppose' . Expr 'then we can conclude' Expr 'rather than' Expr    (rule 33)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 23
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 23

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	If -> 'suppose' Expr . 'then we can conclude' Expr 'rather than' Expr    (rule 33)

	'plus'         shift, and enter state 32
	'minus'        shift, and enter state 33
	'times'        shift, and enter state 34
	'split'        shift, and enter state 35
	'rest'         shift, and enter state 36
	'weaker than'  shift, and enter state 37
	'stronger than'shift, and enter state 38
	'as weak as'   shift, and enter state 39
	'as strong as' shift, and enter state 40
	'same as'      shift, and enter state 41
	'different of' shift, and enter state 42
	'both'         shift, and enter state 43
	'either'       shift, and enter state 44
	'then we can conclude'shift, and enter state 58

	BinaryOp       goto state 31

State 24

	Expr -> 'what is' Expr . '?' CaseOfs                (rule 5)
	Expr -> Expr . BinaryOp Expr                        (rule 7)

	'?'            shift, and enter state 57
	'plus'         shift, and enter state 32
	'minus'        shift, and enter state 33
	'times'        shift, and enter state 34
	'split'        shift, and enter state 35
	'rest'         shift, and enter state 36
	'weaker than'  shift, and enter state 37
	'stronger than'shift, and enter state 38
	'as weak as'   shift, and enter state 39
	'as strong as' shift, and enter state 40
	'same as'      shift, and enter state 41
	'different of' shift, and enter state 42
	'both'         shift, and enter state 43
	'either'       shift, and enter state 44

	BinaryOp       goto state 31

State 25

	LetInDefs -> Definition .                           (rule 31)

	'and'          reduce using rule 31
	'into'         reduce using rule 31


State 26

	Expr -> 'put that' LetInDefs . 'into' Expr          (rule 3)
	LetInDefs -> LetInDefs . 'and' Definition           (rule 32)

	'and'          shift, and enter state 55
	'into'         shift, and enter state 56


State 27

	Expr -> 'put that' 'into' . Expr                    (rule 4)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 54
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 28

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	Expr -> '(' Expr . ')'                              (rule 12)
	Literal -> '(' Expr . 'and his friend' Expr ')'     (rule 44)

	')'            shift, and enter state 52
	'and his friend'shift, and enter state 53
	'plus'         shift, and enter state 32
	'minus'        shift, and enter state 33
	'times'        shift, and enter state 34
	'split'        shift, and enter state 35
	'rest'         shift, and enter state 36
	'weaker than'  shift, and enter state 37
	'stronger than'shift, and enter state 38
	'as weak as'   shift, and enter state 39
	'as strong as' shift, and enter state 40
	'same as'      shift, and enter state 41
	'different of' shift, and enter state 42
	'both'         shift, and enter state 43
	'either'       shift, and enter state 44

	BinaryOp       goto state 31

State 29

	FunctionApp -> 'summon' 'identifier' . 'with' FunctionAppArgs    (rule 26)
	FunctionApp -> 'summon' 'identifier' .              (rule 27)

	'with'         shift, and enter state 51
	'and'          reduce using rule 27
	')'            reduce using rule 27
	'and his friend'reduce using rule 27
	'into'         reduce using rule 27
	'?'            reduce using rule 27
	'perhaps'      reduce using rule 27
	'plus'         reduce using rule 27
	'minus'        reduce using rule 27
	'times'        reduce using rule 27
	'split'        reduce using rule 27
	'rest'         reduce using rule 27
	'weaker than'  reduce using rule 27
	'stronger than'reduce using rule 27
	'as weak as'   reduce using rule 27
	'as strong as' reduce using rule 27
	'same as'      reduce using rule 27
	'different of' reduce using rule 27
	'both'         reduce using rule 27
	'either'       reduce using rule 27
	'then we can conclude'reduce using rule 27
	'rather than'  reduce using rule 27
	%eof           reduce using rule 27


State 30

	Expr -> UnaryOp Expr .                              (rule 6)
	Expr -> Expr . BinaryOp Expr                        (rule 7)

	'and'          reduce using rule 6
	')'            reduce using rule 6
	'and his friend'reduce using rule 6
	'into'         reduce using rule 6
	'?'            reduce using rule 6
	'perhaps'      reduce using rule 6
	'plus'         shift, and enter state 32
			(reduce using rule 6)

	'minus'        shift, and enter state 33
			(reduce using rule 6)

	'times'        shift, and enter state 34
			(reduce using rule 6)

	'split'        shift, and enter state 35
			(reduce using rule 6)

	'rest'         shift, and enter state 36
			(reduce using rule 6)

	'weaker than'  shift, and enter state 37
			(reduce using rule 6)

	'stronger than'shift, and enter state 38
			(reduce using rule 6)

	'as weak as'   shift, and enter state 39
			(reduce using rule 6)

	'as strong as' shift, and enter state 40
			(reduce using rule 6)

	'same as'      shift, and enter state 41
			(reduce using rule 6)

	'different of' shift, and enter state 42
			(reduce using rule 6)

	'both'         shift, and enter state 43
			(reduce using rule 6)

	'either'       shift, and enter state 44
			(reduce using rule 6)

	'then we can conclude'reduce using rule 6
	'rather than'  reduce using rule 6
	%eof           reduce using rule 6

	BinaryOp       goto state 31

State 31

	Expr -> Expr BinaryOp . Expr                        (rule 7)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 50
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 32

	BinaryOp -> 'plus' .                                (rule 47)

	'summon'       reduce using rule 47
	'('            reduce using rule 47
	'put that'     reduce using rule 47
	'what is'      reduce using rule 47
	'neg'          reduce using rule 47
	'not'          reduce using rule 47
	'yep'          reduce using rule 47
	'pasyep'       reduce using rule 47
	'identifier'   reduce using rule 47
	'integer'      reduce using rule 47
	'suppose'      reduce using rule 47


State 33

	BinaryOp -> 'minus' .                               (rule 48)

	'summon'       reduce using rule 48
	'('            reduce using rule 48
	'put that'     reduce using rule 48
	'what is'      reduce using rule 48
	'neg'          reduce using rule 48
	'not'          reduce using rule 48
	'yep'          reduce using rule 48
	'pasyep'       reduce using rule 48
	'identifier'   reduce using rule 48
	'integer'      reduce using rule 48
	'suppose'      reduce using rule 48


State 34

	BinaryOp -> 'times' .                               (rule 49)

	'summon'       reduce using rule 49
	'('            reduce using rule 49
	'put that'     reduce using rule 49
	'what is'      reduce using rule 49
	'neg'          reduce using rule 49
	'not'          reduce using rule 49
	'yep'          reduce using rule 49
	'pasyep'       reduce using rule 49
	'identifier'   reduce using rule 49
	'integer'      reduce using rule 49
	'suppose'      reduce using rule 49


State 35

	BinaryOp -> 'split' .                               (rule 50)

	'summon'       reduce using rule 50
	'('            reduce using rule 50
	'put that'     reduce using rule 50
	'what is'      reduce using rule 50
	'neg'          reduce using rule 50
	'not'          reduce using rule 50
	'yep'          reduce using rule 50
	'pasyep'       reduce using rule 50
	'identifier'   reduce using rule 50
	'integer'      reduce using rule 50
	'suppose'      reduce using rule 50


State 36

	BinaryOp -> 'rest' .                                (rule 51)

	'summon'       reduce using rule 51
	'('            reduce using rule 51
	'put that'     reduce using rule 51
	'what is'      reduce using rule 51
	'neg'          reduce using rule 51
	'not'          reduce using rule 51
	'yep'          reduce using rule 51
	'pasyep'       reduce using rule 51
	'identifier'   reduce using rule 51
	'integer'      reduce using rule 51
	'suppose'      reduce using rule 51


State 37

	BinaryOp -> 'weaker than' .                         (rule 52)

	'summon'       reduce using rule 52
	'('            reduce using rule 52
	'put that'     reduce using rule 52
	'what is'      reduce using rule 52
	'neg'          reduce using rule 52
	'not'          reduce using rule 52
	'yep'          reduce using rule 52
	'pasyep'       reduce using rule 52
	'identifier'   reduce using rule 52
	'integer'      reduce using rule 52
	'suppose'      reduce using rule 52


State 38

	BinaryOp -> 'stronger than' .                       (rule 53)

	'summon'       reduce using rule 53
	'('            reduce using rule 53
	'put that'     reduce using rule 53
	'what is'      reduce using rule 53
	'neg'          reduce using rule 53
	'not'          reduce using rule 53
	'yep'          reduce using rule 53
	'pasyep'       reduce using rule 53
	'identifier'   reduce using rule 53
	'integer'      reduce using rule 53
	'suppose'      reduce using rule 53


State 39

	BinaryOp -> 'as weak as' .                          (rule 54)

	'summon'       reduce using rule 54
	'('            reduce using rule 54
	'put that'     reduce using rule 54
	'what is'      reduce using rule 54
	'neg'          reduce using rule 54
	'not'          reduce using rule 54
	'yep'          reduce using rule 54
	'pasyep'       reduce using rule 54
	'identifier'   reduce using rule 54
	'integer'      reduce using rule 54
	'suppose'      reduce using rule 54


State 40

	BinaryOp -> 'as strong as' .                        (rule 55)

	'summon'       reduce using rule 55
	'('            reduce using rule 55
	'put that'     reduce using rule 55
	'what is'      reduce using rule 55
	'neg'          reduce using rule 55
	'not'          reduce using rule 55
	'yep'          reduce using rule 55
	'pasyep'       reduce using rule 55
	'identifier'   reduce using rule 55
	'integer'      reduce using rule 55
	'suppose'      reduce using rule 55


State 41

	BinaryOp -> 'same as' .                             (rule 56)

	'summon'       reduce using rule 56
	'('            reduce using rule 56
	'put that'     reduce using rule 56
	'what is'      reduce using rule 56
	'neg'          reduce using rule 56
	'not'          reduce using rule 56
	'yep'          reduce using rule 56
	'pasyep'       reduce using rule 56
	'identifier'   reduce using rule 56
	'integer'      reduce using rule 56
	'suppose'      reduce using rule 56


State 42

	BinaryOp -> 'different of' .                        (rule 57)

	'summon'       reduce using rule 57
	'('            reduce using rule 57
	'put that'     reduce using rule 57
	'what is'      reduce using rule 57
	'neg'          reduce using rule 57
	'not'          reduce using rule 57
	'yep'          reduce using rule 57
	'pasyep'       reduce using rule 57
	'identifier'   reduce using rule 57
	'integer'      reduce using rule 57
	'suppose'      reduce using rule 57


State 43

	BinaryOp -> 'both' .                                (rule 58)

	'summon'       reduce using rule 58
	'('            reduce using rule 58
	'put that'     reduce using rule 58
	'what is'      reduce using rule 58
	'neg'          reduce using rule 58
	'not'          reduce using rule 58
	'yep'          reduce using rule 58
	'pasyep'       reduce using rule 58
	'identifier'   reduce using rule 58
	'integer'      reduce using rule 58
	'suppose'      reduce using rule 58


State 44

	BinaryOp -> 'either' .                              (rule 59)

	'summon'       reduce using rule 59
	'('            reduce using rule 59
	'put that'     reduce using rule 59
	'what is'      reduce using rule 59
	'neg'          reduce using rule 59
	'not'          reduce using rule 59
	'yep'          reduce using rule 59
	'pasyep'       reduce using rule 59
	'identifier'   reduce using rule 59
	'integer'      reduce using rule 59
	'suppose'      reduce using rule 59


State 45

	Definition -> 'this' 'identifier' . 'is' Expr       (rule 14)

	'is'           shift, and enter state 49


State 46

	FunctionDef -> 'behold' 'identifier' . FArgs 'which does' Expr    (rule 15)

	'with'         shift, and enter state 48
	'which does'   reduce using rule 16

	FArgs          goto state 47

State 47

	FunctionDef -> 'behold' 'identifier' FArgs . 'which does' Expr    (rule 15)

	'which does'   shift, and enter state 78


State 48

	FArgs -> 'with' . Args                              (rule 17)

	'('            shift, and enter state 74
	'identifier'   shift, and enter state 75
	'Integer'      shift, and enter state 76
	'Boolean'      shift, and enter state 77

	Args           goto state 70
	Arg            goto state 71
	Type           goto state 72
	TypeTuple      goto state 73

State 49

	Definition -> 'this' 'identifier' 'is' . Expr       (rule 14)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 69
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 50

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	Expr -> Expr BinaryOp Expr .                        (rule 7)

	'and'          reduce using rule 7
	')'            reduce using rule 7
	'and his friend'reduce using rule 7
	'into'         reduce using rule 7
	'?'            reduce using rule 7
	'perhaps'      reduce using rule 7
	'plus'         shift, and enter state 32
			(reduce using rule 7)

	'minus'        shift, and enter state 33
			(reduce using rule 7)

	'times'        shift, and enter state 34
			(reduce using rule 7)

	'split'        shift, and enter state 35
			(reduce using rule 7)

	'rest'         shift, and enter state 36
			(reduce using rule 7)

	'weaker than'  shift, and enter state 37
			(reduce using rule 7)

	'stronger than'shift, and enter state 38
			(reduce using rule 7)

	'as weak as'   shift, and enter state 39
			(reduce using rule 7)

	'as strong as' shift, and enter state 40
			(reduce using rule 7)

	'same as'      shift, and enter state 41
			(reduce using rule 7)

	'different of' shift, and enter state 42
			(reduce using rule 7)

	'both'         shift, and enter state 43
			(reduce using rule 7)

	'either'       shift, and enter state 44
			(reduce using rule 7)

	'then we can conclude'reduce using rule 7
	'rather than'  reduce using rule 7
	%eof           reduce using rule 7

	BinaryOp       goto state 31

State 51

	FunctionApp -> 'summon' 'identifier' 'with' . FunctionAppArgs    (rule 26)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 66
	FunctionApp    goto state 8
	FunctionAppArgsgoto state 67
	FunctionAppArg goto state 68
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 52

	Expr -> '(' Expr ')' .                              (rule 12)

	'and'          reduce using rule 12
	')'            reduce using rule 12
	'and his friend'reduce using rule 12
	'into'         reduce using rule 12
	'?'            reduce using rule 12
	'perhaps'      reduce using rule 12
	'plus'         reduce using rule 12
	'minus'        reduce using rule 12
	'times'        reduce using rule 12
	'split'        reduce using rule 12
	'rest'         reduce using rule 12
	'weaker than'  reduce using rule 12
	'stronger than'reduce using rule 12
	'as weak as'   reduce using rule 12
	'as strong as' reduce using rule 12
	'same as'      reduce using rule 12
	'different of' reduce using rule 12
	'both'         reduce using rule 12
	'either'       reduce using rule 12
	'then we can conclude'reduce using rule 12
	'rather than'  reduce using rule 12
	%eof           reduce using rule 12


State 53

	Literal -> '(' Expr 'and his friend' . Expr ')'     (rule 44)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 65
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 54

	Expr -> 'put that' 'into' Expr .                    (rule 4)
	Expr -> Expr . BinaryOp Expr                        (rule 7)

	'and'          reduce using rule 4
	')'            reduce using rule 4
	'and his friend'reduce using rule 4
	'into'         reduce using rule 4
	'?'            reduce using rule 4
	'perhaps'      reduce using rule 4
	'plus'         shift, and enter state 32
	'minus'        shift, and enter state 33
	'times'        shift, and enter state 34
	'split'        shift, and enter state 35
	'rest'         shift, and enter state 36
	'weaker than'  shift, and enter state 37
	'stronger than'shift, and enter state 38
	'as weak as'   shift, and enter state 39
	'as strong as' shift, and enter state 40
	'same as'      shift, and enter state 41
	'different of' shift, and enter state 42
	'both'         shift, and enter state 43
	'either'       shift, and enter state 44
	'then we can conclude'reduce using rule 4
	'rather than'  reduce using rule 4
	%eof           reduce using rule 4

	BinaryOp       goto state 31

State 55

	LetInDefs -> LetInDefs 'and' . Definition           (rule 32)

	'behold'       shift, and enter state 4
	'this'         shift, and enter state 5

	Definition     goto state 64
	FunctionDef    goto state 3

State 56

	Expr -> 'put that' LetInDefs 'into' . Expr          (rule 3)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 63
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 57

	Expr -> 'what is' Expr '?' . CaseOfs                (rule 5)

	'perhaps'      shift, and enter state 62

	CaseOfs        goto state 60
	CaseOf         goto state 61

State 58

	If -> 'suppose' Expr 'then we can conclude' . Expr 'rather than' Expr    (rule 33)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 59
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 59

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	If -> 'suppose' Expr 'then we can conclude' Expr . 'rather than' Expr    (rule 33)

	'plus'         shift, and enter state 32
	'minus'        shift, and enter state 33
	'times'        shift, and enter state 34
	'split'        shift, and enter state 35
	'rest'         shift, and enter state 36
	'weaker than'  shift, and enter state 37
	'stronger than'shift, and enter state 38
	'as weak as'   shift, and enter state 39
	'as strong as' shift, and enter state 40
	'same as'      shift, and enter state 41
	'different of' shift, and enter state 42
	'both'         shift, and enter state 43
	'either'       shift, and enter state 44
	'rather than'  shift, and enter state 92

	BinaryOp       goto state 31

State 60

	Expr -> 'what is' Expr '?' CaseOfs .                (rule 5)

	'and'          reduce using rule 5
	')'            reduce using rule 5
	'and his friend'reduce using rule 5
	'into'         reduce using rule 5
	'?'            reduce using rule 5
	'perhaps'      reduce using rule 5
	'plus'         reduce using rule 5
	'minus'        reduce using rule 5
	'times'        reduce using rule 5
	'split'        reduce using rule 5
	'rest'         reduce using rule 5
	'weaker than'  reduce using rule 5
	'stronger than'reduce using rule 5
	'as weak as'   reduce using rule 5
	'as strong as' reduce using rule 5
	'same as'      reduce using rule 5
	'different of' reduce using rule 5
	'both'         reduce using rule 5
	'either'       reduce using rule 5
	'then we can conclude'reduce using rule 5
	'rather than'  reduce using rule 5
	%eof           reduce using rule 5


State 61

	CaseOfs -> CaseOf .                                 (rule 34)
	CaseOfs -> CaseOf . CaseOfs                         (rule 35)

	'and'          reduce using rule 34
	')'            reduce using rule 34
	'and his friend'reduce using rule 34
	'into'         reduce using rule 34
	'?'            reduce using rule 34
	'perhaps'      shift, and enter state 62
			(reduce using rule 34)

	'plus'         reduce using rule 34
	'minus'        reduce using rule 34
	'times'        reduce using rule 34
	'split'        reduce using rule 34
	'rest'         reduce using rule 34
	'weaker than'  reduce using rule 34
	'stronger than'reduce using rule 34
	'as weak as'   reduce using rule 34
	'as strong as' reduce using rule 34
	'same as'      reduce using rule 34
	'different of' reduce using rule 34
	'both'         reduce using rule 34
	'either'       reduce using rule 34
	'then we can conclude'reduce using rule 34
	'rather than'  reduce using rule 34
	%eof           reduce using rule 34

	CaseOfs        goto state 91
	CaseOf         goto state 61

State 62

	CaseOf -> 'perhaps' . Pattern 'which does' Expr     (rule 36)

	'('            shift, and enter state 88
	'who cares'    shift, and enter state 89
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 90
	'integer'      shift, and enter state 21

	Pattern        goto state 86
	Literal        goto state 87

State 63

	Expr -> 'put that' LetInDefs 'into' Expr .          (rule 3)
	Expr -> Expr . BinaryOp Expr                        (rule 7)

	'and'          reduce using rule 3
	')'            reduce using rule 3
	'and his friend'reduce using rule 3
	'into'         reduce using rule 3
	'?'            reduce using rule 3
	'perhaps'      reduce using rule 3
	'plus'         shift, and enter state 32
	'minus'        shift, and enter state 33
	'times'        shift, and enter state 34
	'split'        shift, and enter state 35
	'rest'         shift, and enter state 36
	'weaker than'  shift, and enter state 37
	'stronger than'shift, and enter state 38
	'as weak as'   shift, and enter state 39
	'as strong as' shift, and enter state 40
	'same as'      shift, and enter state 41
	'different of' shift, and enter state 42
	'both'         shift, and enter state 43
	'either'       shift, and enter state 44
	'then we can conclude'reduce using rule 3
	'rather than'  reduce using rule 3
	%eof           reduce using rule 3

	BinaryOp       goto state 31

State 64

	LetInDefs -> LetInDefs 'and' Definition .           (rule 32)

	'and'          reduce using rule 32
	'into'         reduce using rule 32


State 65

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	Literal -> '(' Expr 'and his friend' Expr . ')'     (rule 44)

	')'            shift, and enter state 85
	'plus'         shift, and enter state 32
	'minus'        shift, and enter state 33
	'times'        shift, and enter state 34
	'split'        shift, and enter state 35
	'rest'         shift, and enter state 36
	'weaker than'  shift, and enter state 37
	'stronger than'shift, and enter state 38
	'as weak as'   shift, and enter state 39
	'as strong as' shift, and enter state 40
	'same as'      shift, and enter state 41
	'different of' shift, and enter state 42
	'both'         shift, and enter state 43
	'either'       shift, and enter state 44

	BinaryOp       goto state 31

State 66

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	FunctionAppArg -> Expr .                            (rule 30)

	'and'          reduce using rule 30
	')'            reduce using rule 30
	'and his friend'reduce using rule 30
	'into'         reduce using rule 30
	'?'            reduce using rule 30
	'perhaps'      reduce using rule 30
	'plus'         shift, and enter state 32
			(reduce using rule 30)

	'minus'        shift, and enter state 33
			(reduce using rule 30)

	'times'        shift, and enter state 34
			(reduce using rule 30)

	'split'        shift, and enter state 35
			(reduce using rule 30)

	'rest'         shift, and enter state 36
			(reduce using rule 30)

	'weaker than'  shift, and enter state 37
			(reduce using rule 30)

	'stronger than'shift, and enter state 38
			(reduce using rule 30)

	'as weak as'   shift, and enter state 39
			(reduce using rule 30)

	'as strong as' shift, and enter state 40
			(reduce using rule 30)

	'same as'      shift, and enter state 41
			(reduce using rule 30)

	'different of' shift, and enter state 42
			(reduce using rule 30)

	'both'         shift, and enter state 43
			(reduce using rule 30)

	'either'       shift, and enter state 44
			(reduce using rule 30)

	'then we can conclude'reduce using rule 30
	'rather than'  reduce using rule 30
	%eof           reduce using rule 30

	BinaryOp       goto state 31

State 67

	FunctionApp -> 'summon' 'identifier' 'with' FunctionAppArgs .    (rule 26)
	FunctionAppArgs -> FunctionAppArgs . 'and' FunctionAppArg    (rule 29)

	'and'          shift, and enter state 84
			(reduce using rule 26)

	')'            reduce using rule 26
	'and his friend'reduce using rule 26
	'into'         reduce using rule 26
	'?'            reduce using rule 26
	'perhaps'      reduce using rule 26
	'plus'         reduce using rule 26
	'minus'        reduce using rule 26
	'times'        reduce using rule 26
	'split'        reduce using rule 26
	'rest'         reduce using rule 26
	'weaker than'  reduce using rule 26
	'stronger than'reduce using rule 26
	'as weak as'   reduce using rule 26
	'as strong as' reduce using rule 26
	'same as'      reduce using rule 26
	'different of' reduce using rule 26
	'both'         reduce using rule 26
	'either'       reduce using rule 26
	'then we can conclude'reduce using rule 26
	'rather than'  reduce using rule 26
	%eof           reduce using rule 26


State 68

	FunctionAppArgs -> FunctionAppArg .                 (rule 28)

	'and'          reduce using rule 28
	')'            reduce using rule 28
	'and his friend'reduce using rule 28
	'into'         reduce using rule 28
	'?'            reduce using rule 28
	'perhaps'      reduce using rule 28
	'plus'         reduce using rule 28
	'minus'        reduce using rule 28
	'times'        reduce using rule 28
	'split'        reduce using rule 28
	'rest'         reduce using rule 28
	'weaker than'  reduce using rule 28
	'stronger than'reduce using rule 28
	'as weak as'   reduce using rule 28
	'as strong as' reduce using rule 28
	'same as'      reduce using rule 28
	'different of' reduce using rule 28
	'both'         reduce using rule 28
	'either'       reduce using rule 28
	'then we can conclude'reduce using rule 28
	'rather than'  reduce using rule 28
	%eof           reduce using rule 28


State 69

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	Definition -> 'this' 'identifier' 'is' Expr .       (rule 14)

	'and'          reduce using rule 14
	'into'         reduce using rule 14
	'plus'         shift, and enter state 32
	'minus'        shift, and enter state 33
	'times'        shift, and enter state 34
	'split'        shift, and enter state 35
	'rest'         shift, and enter state 36
	'weaker than'  shift, and enter state 37
	'stronger than'shift, and enter state 38
	'as weak as'   shift, and enter state 39
	'as strong as' shift, and enter state 40
	'same as'      shift, and enter state 41
	'different of' shift, and enter state 42
	'both'         shift, and enter state 43
	'either'       shift, and enter state 44
	%eof           reduce using rule 14

	BinaryOp       goto state 31

State 70

	FArgs -> 'with' Args .                              (rule 17)
	Args -> Args . 'and' Arg                            (rule 19)

	'and'          shift, and enter state 83
	'which does'   reduce using rule 17


State 71

	Args -> Arg .                                       (rule 18)

	'and'          reduce using rule 18
	'which does'   reduce using rule 18


State 72

	Arg -> Type . 'identifier'                          (rule 20)

	'identifier'   shift, and enter state 82


State 73

	Type -> TypeTuple .                                 (rule 24)

	')'            reduce using rule 24
	'and his friend'reduce using rule 24
	'identifier'   reduce using rule 24


State 74

	TypeTuple -> '(' . Type 'and his friend' Type ')'    (rule 25)

	'('            shift, and enter state 74
	'Integer'      shift, and enter state 76
	'Boolean'      shift, and enter state 77

	Type           goto state 81
	TypeTuple      goto state 73

State 75

	Arg -> 'identifier' . '(' Arg 'and his friend' Arg ')'    (rule 21)

	'('            shift, and enter state 80


State 76

	Type -> 'Integer' .                                 (rule 22)

	')'            reduce using rule 22
	'and his friend'reduce using rule 22
	'identifier'   reduce using rule 22


State 77

	Type -> 'Boolean' .                                 (rule 23)

	')'            reduce using rule 23
	'and his friend'reduce using rule 23
	'identifier'   reduce using rule 23


State 78

	FunctionDef -> 'behold' 'identifier' FArgs 'which does' . Expr    (rule 15)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 79
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 79

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	FunctionDef -> 'behold' 'identifier' FArgs 'which does' Expr .    (rule 15)

	'and'          reduce using rule 15
	'into'         reduce using rule 15
	'plus'         shift, and enter state 32
	'minus'        shift, and enter state 33
	'times'        shift, and enter state 34
	'split'        shift, and enter state 35
	'rest'         shift, and enter state 36
	'weaker than'  shift, and enter state 37
	'stronger than'shift, and enter state 38
	'as weak as'   shift, and enter state 39
	'as strong as' shift, and enter state 40
	'same as'      shift, and enter state 41
	'different of' shift, and enter state 42
	'both'         shift, and enter state 43
	'either'       shift, and enter state 44
	%eof           reduce using rule 15

	BinaryOp       goto state 31

State 80

	Arg -> 'identifier' '(' . Arg 'and his friend' Arg ')'    (rule 21)

	'('            shift, and enter state 74
	'identifier'   shift, and enter state 75
	'Integer'      shift, and enter state 76
	'Boolean'      shift, and enter state 77

	Arg            goto state 103
	Type           goto state 72
	TypeTuple      goto state 73

State 81

	TypeTuple -> '(' Type . 'and his friend' Type ')'    (rule 25)

	'and his friend'shift, and enter state 102


State 82

	Arg -> Type 'identifier' .                          (rule 20)

	'and'          reduce using rule 20
	')'            reduce using rule 20
	'and his friend'reduce using rule 20
	'which does'   reduce using rule 20


State 83

	Args -> Args 'and' . Arg                            (rule 19)

	'('            shift, and enter state 74
	'identifier'   shift, and enter state 75
	'Integer'      shift, and enter state 76
	'Boolean'      shift, and enter state 77

	Arg            goto state 101
	Type           goto state 72
	TypeTuple      goto state 73

State 84

	FunctionAppArgs -> FunctionAppArgs 'and' . FunctionAppArg    (rule 29)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 66
	FunctionApp    goto state 8
	FunctionAppArg goto state 100
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 85

	Literal -> '(' Expr 'and his friend' Expr ')' .     (rule 44)

	'and'          reduce using rule 44
	')'            reduce using rule 44
	'and his friend'reduce using rule 44
	'into'         reduce using rule 44
	'?'            reduce using rule 44
	'perhaps'      reduce using rule 44
	'which does'   reduce using rule 44
	'plus'         reduce using rule 44
	'minus'        reduce using rule 44
	'times'        reduce using rule 44
	'split'        reduce using rule 44
	'rest'         reduce using rule 44
	'weaker than'  reduce using rule 44
	'stronger than'reduce using rule 44
	'as weak as'   reduce using rule 44
	'as strong as' reduce using rule 44
	'same as'      reduce using rule 44
	'different of' reduce using rule 44
	'both'         reduce using rule 44
	'either'       reduce using rule 44
	'then we can conclude'reduce using rule 44
	'rather than'  reduce using rule 44
	%eof           reduce using rule 44


State 86

	CaseOf -> 'perhaps' Pattern . 'which does' Expr     (rule 36)

	'which does'   shift, and enter state 99


State 87

	Pattern -> Literal .                                (rule 40)

	')'            reduce using rule 40
	'which does'   reduce using rule 40


State 88

	Pattern -> '(' . Pattern 'and his friend' Pattern ')'    (rule 39)
	Literal -> '(' . Expr 'and his friend' Expr ')'     (rule 44)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 97
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'who cares'    shift, and enter state 89
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 98
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 94
	FunctionApp    goto state 8
	If             goto state 9
	Pattern        goto state 95
	Literal        goto state 96
	UnaryOp        goto state 11

State 89

	Pattern -> 'who cares' .                            (rule 37)

	')'            reduce using rule 37
	'and his friend'reduce using rule 37
	'which does'   reduce using rule 37


State 90

	Pattern -> 'identifier' .                           (rule 38)

	')'            reduce using rule 38
	'which does'   reduce using rule 38


State 91

	CaseOfs -> CaseOf CaseOfs .                         (rule 35)

	'and'          reduce using rule 35
	')'            reduce using rule 35
	'and his friend'reduce using rule 35
	'into'         reduce using rule 35
	'?'            reduce using rule 35
	'perhaps'      reduce using rule 35
	'plus'         reduce using rule 35
	'minus'        reduce using rule 35
	'times'        reduce using rule 35
	'split'        reduce using rule 35
	'rest'         reduce using rule 35
	'weaker than'  reduce using rule 35
	'stronger than'reduce using rule 35
	'as weak as'   reduce using rule 35
	'as strong as' reduce using rule 35
	'same as'      reduce using rule 35
	'different of' reduce using rule 35
	'both'         reduce using rule 35
	'either'       reduce using rule 35
	'then we can conclude'reduce using rule 35
	'rather than'  reduce using rule 35
	%eof           reduce using rule 35


State 92

	If -> 'suppose' Expr 'then we can conclude' Expr 'rather than' . Expr    (rule 33)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 93
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 93

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	If -> 'suppose' Expr 'then we can conclude' Expr 'rather than' Expr .    (rule 33)

	'and'          reduce using rule 33
	')'            reduce using rule 33
	'and his friend'reduce using rule 33
	'into'         reduce using rule 33
	'?'            reduce using rule 33
	'perhaps'      reduce using rule 33
	'plus'         shift, and enter state 32
			(reduce using rule 33)

	'minus'        shift, and enter state 33
			(reduce using rule 33)

	'times'        shift, and enter state 34
			(reduce using rule 33)

	'split'        shift, and enter state 35
			(reduce using rule 33)

	'rest'         shift, and enter state 36
			(reduce using rule 33)

	'weaker than'  shift, and enter state 37
			(reduce using rule 33)

	'stronger than'shift, and enter state 38
			(reduce using rule 33)

	'as weak as'   shift, and enter state 39
			(reduce using rule 33)

	'as strong as' shift, and enter state 40
			(reduce using rule 33)

	'same as'      shift, and enter state 41
			(reduce using rule 33)

	'different of' shift, and enter state 42
			(reduce using rule 33)

	'both'         shift, and enter state 43
			(reduce using rule 33)

	'either'       shift, and enter state 44
			(reduce using rule 33)

	'then we can conclude'reduce using rule 33
	'rather than'  reduce using rule 33
	%eof           reduce using rule 33

	BinaryOp       goto state 31

State 94

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	Literal -> '(' Expr . 'and his friend' Expr ')'     (rule 44)

	'and his friend'shift, and enter state 53
	'plus'         shift, and enter state 32
	'minus'        shift, and enter state 33
	'times'        shift, and enter state 34
	'split'        shift, and enter state 35
	'rest'         shift, and enter state 36
	'weaker than'  shift, and enter state 37
	'stronger than'shift, and enter state 38
	'as weak as'   shift, and enter state 39
	'as strong as' shift, and enter state 40
	'same as'      shift, and enter state 41
	'different of' shift, and enter state 42
	'both'         shift, and enter state 43
	'either'       shift, and enter state 44

	BinaryOp       goto state 31

State 95

	Pattern -> '(' Pattern . 'and his friend' Pattern ')'    (rule 39)

	'and his friend'shift, and enter state 107


State 96

	Expr -> Literal .                                   (rule 8)
	Pattern -> Literal .                                (rule 40)

	')'            reduce using rule 8
	'and his friend'reduce using rule 40
			(reduce using rule 8)

	'plus'         reduce using rule 8
	'minus'        reduce using rule 8
	'times'        reduce using rule 8
	'split'        reduce using rule 8
	'rest'         reduce using rule 8
	'weaker than'  reduce using rule 8
	'stronger than'reduce using rule 8
	'as weak as'   reduce using rule 8
	'as strong as' reduce using rule 8
	'same as'      reduce using rule 8
	'different of' reduce using rule 8
	'both'         reduce using rule 8
	'either'       reduce using rule 8


State 97

	Expr -> '(' . Expr ')'                              (rule 12)
	Pattern -> '(' . Pattern 'and his friend' Pattern ')'    (rule 39)
	Literal -> '(' . Expr 'and his friend' Expr ')'     (rule 44)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 97
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'who cares'    shift, and enter state 89
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 98
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 28
	FunctionApp    goto state 8
	If             goto state 9
	Pattern        goto state 95
	Literal        goto state 96
	UnaryOp        goto state 11

State 98

	Expr -> 'identifier' .                              (rule 9)
	Pattern -> 'identifier' .                           (rule 38)

	')'            reduce using rule 9
	'and his friend'reduce using rule 38
			(reduce using rule 9)

	'plus'         reduce using rule 9
	'minus'        reduce using rule 9
	'times'        reduce using rule 9
	'split'        reduce using rule 9
	'rest'         reduce using rule 9
	'weaker than'  reduce using rule 9
	'stronger than'reduce using rule 9
	'as weak as'   reduce using rule 9
	'as strong as' reduce using rule 9
	'same as'      reduce using rule 9
	'different of' reduce using rule 9
	'both'         reduce using rule 9
	'either'       reduce using rule 9


State 99

	CaseOf -> 'perhaps' Pattern 'which does' . Expr     (rule 36)

	'summon'       shift, and enter state 12
	'('            shift, and enter state 13
	'put that'     shift, and enter state 14
	'what is'      shift, and enter state 15
	'neg'          shift, and enter state 16
	'not'          shift, and enter state 17
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 20
	'integer'      shift, and enter state 21
	'suppose'      shift, and enter state 22

	Expr           goto state 106
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10
	UnaryOp        goto state 11

State 100

	FunctionAppArgs -> FunctionAppArgs 'and' FunctionAppArg .    (rule 29)

	'and'          reduce using rule 29
	')'            reduce using rule 29
	'and his friend'reduce using rule 29
	'into'         reduce using rule 29
	'?'            reduce using rule 29
	'perhaps'      reduce using rule 29
	'plus'         reduce using rule 29
	'minus'        reduce using rule 29
	'times'        reduce using rule 29
	'split'        reduce using rule 29
	'rest'         reduce using rule 29
	'weaker than'  reduce using rule 29
	'stronger than'reduce using rule 29
	'as weak as'   reduce using rule 29
	'as strong as' reduce using rule 29
	'same as'      reduce using rule 29
	'different of' reduce using rule 29
	'both'         reduce using rule 29
	'either'       reduce using rule 29
	'then we can conclude'reduce using rule 29
	'rather than'  reduce using rule 29
	%eof           reduce using rule 29


State 101

	Args -> Args 'and' Arg .                            (rule 19)

	'and'          reduce using rule 19
	'which does'   reduce using rule 19


State 102

	TypeTuple -> '(' Type 'and his friend' . Type ')'    (rule 25)

	'('            shift, and enter state 74
	'Integer'      shift, and enter state 76
	'Boolean'      shift, and enter state 77

	Type           goto state 105
	TypeTuple      goto state 73

State 103

	Arg -> 'identifier' '(' Arg . 'and his friend' Arg ')'    (rule 21)

	'and his friend'shift, and enter state 104


State 104

	Arg -> 'identifier' '(' Arg 'and his friend' . Arg ')'    (rule 21)

	'('            shift, and enter state 74
	'identifier'   shift, and enter state 75
	'Integer'      shift, and enter state 76
	'Boolean'      shift, and enter state 77

	Arg            goto state 110
	Type           goto state 72
	TypeTuple      goto state 73

State 105

	TypeTuple -> '(' Type 'and his friend' Type . ')'    (rule 25)

	')'            shift, and enter state 109


State 106

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	CaseOf -> 'perhaps' Pattern 'which does' Expr .     (rule 36)

	'and'          reduce using rule 36
	')'            reduce using rule 36
	'and his friend'reduce using rule 36
	'into'         reduce using rule 36
	'?'            reduce using rule 36
	'perhaps'      reduce using rule 36
	'plus'         shift, and enter state 32
			(reduce using rule 36)

	'minus'        shift, and enter state 33
			(reduce using rule 36)

	'times'        shift, and enter state 34
			(reduce using rule 36)

	'split'        shift, and enter state 35
			(reduce using rule 36)

	'rest'         shift, and enter state 36
			(reduce using rule 36)

	'weaker than'  shift, and enter state 37
			(reduce using rule 36)

	'stronger than'shift, and enter state 38
			(reduce using rule 36)

	'as weak as'   shift, and enter state 39
			(reduce using rule 36)

	'as strong as' shift, and enter state 40
			(reduce using rule 36)

	'same as'      shift, and enter state 41
			(reduce using rule 36)

	'different of' shift, and enter state 42
			(reduce using rule 36)

	'both'         shift, and enter state 43
			(reduce using rule 36)

	'either'       shift, and enter state 44
			(reduce using rule 36)

	'then we can conclude'reduce using rule 36
	'rather than'  reduce using rule 36
	%eof           reduce using rule 36

	BinaryOp       goto state 31

State 107

	Pattern -> '(' Pattern 'and his friend' . Pattern ')'    (rule 39)

	'('            shift, and enter state 88
	'who cares'    shift, and enter state 89
	'yep'          shift, and enter state 18
	'pasyep'       shift, and enter state 19
	'identifier'   shift, and enter state 90
	'integer'      shift, and enter state 21

	Pattern        goto state 108
	Literal        goto state 87

State 108

	Pattern -> '(' Pattern 'and his friend' Pattern . ')'    (rule 39)

	')'            shift, and enter state 112


State 109

	TypeTuple -> '(' Type 'and his friend' Type ')' .    (rule 25)

	')'            reduce using rule 25
	'and his friend'reduce using rule 25
	'identifier'   reduce using rule 25


State 110

	Arg -> 'identifier' '(' Arg 'and his friend' Arg . ')'    (rule 21)

	')'            shift, and enter state 111


State 111

	Arg -> 'identifier' '(' Arg 'and his friend' Arg ')' .    (rule 21)

	'and'          reduce using rule 21
	')'            reduce using rule 21
	'and his friend'reduce using rule 21
	'which does'   reduce using rule 21


State 112

	Pattern -> '(' Pattern 'and his friend' Pattern ')' .    (rule 39)

	')'            reduce using rule 39
	'and his friend'reduce using rule 39
	'which does'   reduce using rule 39


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 60
Number of terminals: 40
Number of non-terminals: 21
Number of states: 113
