Fonctionnalités :
Une définition ne retourne pas de valeur
lors de l’évaluation mais augmente l’environnement de 
l’interpréteur (global) avec une nouvelle association
alors qu’une expression retourne une valeur d’exécution 
durant l’évaluation.


Définition de fonctions (non-récursives) ; 
définition de variables ; 
littéraux entiers, booléens, tuples ;
occurrences de variable ;
applications de fonction ; 
expressions let-in avec plusieurs définitions ; 
expressions case-of sans gardes avec motifs universel, variable, littéraux ; 
opérations unaires, binaires.


Statement		-> Definition | Expr

Definition		-> FunctionDef | VariableDef
FunctionDef		-> 'behold' FunctionName ['with' Args] 'which does' Expr
FunctionName 	-> Identifier
Args			-> Arg | Arg 'and' Args
Arg				-> Type Identifier | TypeTuple
Type 			-> 'Integer' | 'Boolean' | TypeTuple
TypeTuple		-> '(' Arg 'and his friend' Arg ')'
VariableDef		-> 'this' VariableName 'is' Expr
VariableName	-> Identifier
Identifier		-> Alpha+

Digit 			-> [0-9]
Integer			-> Digit | Digit Digits
Alpha			-> UpperChar | LowerChar
UpperChar 		-> [A-Z]
LowerChar		-> [a-z]
Boolean			-> yep | pasyep
Tuple			-> '(' Expr 'and his friend' Expr ')'

VariableOcc		-> VariableName	-- utile?

FunctionApp		-> 'summon' FunctionName ['with' FunctionAppArgs]
FunctionAppArgs	-> FunctionAppArg | FunctionAppArg 'and' FunctionAppArgs
FunctionAppArg	-> Expr

LetIn			-> 'put that' LetInDefs* 'into' Expr 
LetInDefs		-> LetInDef | LetInDef 'and' LetInDefs
LetInDef		-> Definition

Case 			-> 'what is' Expr '?' CaseOfs
CaseOfs			-> CaseOf | CaseOf CaseOfs
CaseOf			-> 'perhaps' CaseOfPattern 'which does' Expr
Pattern			-> 'who cares' | VariableName | Literal


Literal			-> Integer | Boolean | Tuple

UnaryOp 		-> neg | not
BinaryOp		-> plus | minus | times | split | rest 
				 | weaker than | stronger than | as weak as | as strong as 
				 | same as | different of | both | either

Expr			-> LetIn
				 | CaseOf
				 | UnaryOp Expr
				 | Expr BinaryOp Expr
				 | Literal
				 | VariableOcc
				 | FunctionApp
	
