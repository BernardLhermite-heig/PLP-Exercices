{-
: Auteur:   StÃ©phane Marengo
: Date:     19.06.2022
-}

Digit 			-> [0-9]
Alpha			-> [a-zA-Z]

Statement		-> Definition | Expr

Expr			-> LetIn
				 | CaseOf
				 | UnaryOp Expr
				 | Expr BinaryOp Expr
				 | Literal
				 | Identifier
				 | FunctionApp
				 | If
				 | '(' Expr ')'

Definition		-> FunctionDef | VariableDef
FunctionDef		-> 'behold' Identifier ['with' Args] 'which does' Expr
Args			-> Arg { 'and' Arg }
Arg				-> Type Identifier 
				 | Identifier '(' Arg 'and his friend' Arg ')'
Type 			-> 'Integer' | 'Boolean' | TypeTuple
TypeTuple		-> '(' Type 'and his friend' Type ')'
VariableDef		-> 'this' Identifier 'is' Expr
Identifier		-> Alpha {Alpha Digit}

FunctionApp		-> 'summon' Identifier ['with' FunctionAppArgs]
FunctionAppArgs -> Expr { 'and' Expr }

LetIn			-> 'put that' [LetInDefs] 'into' Expr 
LetInDefs		-> Definition { 'and' Definition }

If				-> 'suppose' Expr 'then we can conclude' Expr 'rather than' Expr

CaseOf 			-> 'what is' Expr '?' Cases
Cases			-> Case { Case }
Case			-> 'perhaps' Pattern 'which does' Expr
Pattern			-> 'who cares' 
				 | Identifier 
				 | '(' Pattern 'and his friend' Pattern ')' 
				 | Literal

Literal			-> Integer | Boolean | Tuple
Integer			-> Digit { Digit }
Boolean			-> yep | pasyep
Tuple			-> '(' Expr 'and his friend' Expr ')'

UnaryOp 		-> 'neg' | 'not'
BinaryOp		-> 'plus' | 'minus' | 'times' | 'split' | 'rest' 
				 | 'weaker than' | 'stronger than' | 'as weak as' | 'as strong as' 
				 | 'same as' | 'different of' | 'both' | 'either'