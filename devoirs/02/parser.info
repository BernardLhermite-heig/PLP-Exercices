-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from parser.y
-----------------------------------------------------------------------------

state 27 contains 13 shift/reduce conflicts.
state 47 contains 13 shift/reduce conflicts.
state 55 contains 1 shift/reduce conflicts.
state 60 contains 13 shift/reduce conflicts.
state 61 contains 1 shift/reduce conflicts.
state 89 contains 13 shift/reduce conflicts.

rule 31 is unused

terminal 'suppose' is unused
terminal 'then we can conclude' is unused
terminal 'rather than' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Statement                         (0)
	Statement -> Definition                            (1)
	Statement -> Expr                                  (2)
	Expr -> 'put that' LetInDefs 'into' Expr           (3)
	Expr -> 'put that' 'into' Expr                     (4)
	Expr -> 'what is' Expr '?' CaseOfs                 (5)
	Expr -> UnaryOp Expr                               (6)
	Expr -> Expr BinaryOp Expr                         (7)
	Expr -> Literal                                    (8)
	Expr -> 'identifier'                               (9)
	Expr -> FunctionApp                                (10)
	Definition -> FunctionDef                          (11)
	Definition -> 'this' 'identifier' 'is' Expr        (12)
	FunctionDef -> 'behold' 'identifier' FArgs 'which does' Expr   (13)
	FArgs ->                                           (14)
	FArgs -> 'with' Args                               (15)
	Args -> Arg                                        (16)
	Args -> Args 'and' Arg                             (17)
	Arg -> Type 'identifier'                           (18)
	Arg -> TypeTuple                                   (19)
	Type -> 'Integer'                                  (20)
	Type -> 'Boolean'                                  (21)
	Type -> TypeTuple                                  (22)
	TypeTuple -> '(' Type 'and his friend' Type ')'    (23)
	FunctionApp -> 'summon' 'identifier' 'with' FunctionAppArgs   (24)
	FunctionApp -> 'summon' 'identifier'               (25)
	FunctionAppArgs -> FunctionAppArg                  (26)
	FunctionAppArgs -> FunctionAppArgs 'and' FunctionAppArg   (27)
	FunctionAppArg -> Expr                             (28)
	LetInDefs -> Definition                            (29)
	LetInDefs -> LetInDefs 'and' Definition            (30)
	If -> 'suppose' Expr 'then we can conclude' Expr 'rather than' Expr   (31)
	CaseOfs -> CaseOf                                  (32)
	CaseOfs -> CaseOf CaseOfs                          (33)
	CaseOf -> 'perhaps' Pattern 'which does' Expr      (34)
	Pattern -> 'who cares'                             (35)
	Pattern -> 'identifier'                            (36)
	Pattern -> Literal                                 (37)
	Literal -> 'integer'                               (38)
	Literal -> 'yep'                                   (39)
	Literal -> 'pasyep'                                (40)
	Literal -> '(' Expr 'and his friend' Expr ')'      (41)
	UnaryOp -> 'neg'                                   (42)
	UnaryOp -> 'not'                                   (43)
	BinaryOp -> 'plus'                                 (44)
	BinaryOp -> 'minus'                                (45)
	BinaryOp -> 'times'                                (46)
	BinaryOp -> 'split'                                (47)
	BinaryOp -> 'rest'                                 (48)
	BinaryOp -> 'weaker than'                          (49)
	BinaryOp -> 'stronger than'                        (50)
	BinaryOp -> 'as weak as'                           (51)
	BinaryOp -> 'as strong as'                         (52)
	BinaryOp -> 'same as'                              (53)
	BinaryOp -> 'different of'                         (54)
	BinaryOp -> 'both'                                 (55)
	BinaryOp -> 'either'                               (56)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'behold'       { TokenPosn Behold _ }
	'summon'       { TokenPosn Summon _ }
	'with'         { TokenPosn With _ }
	'and'          { TokenPosn AndParam _ }
	'this'         { TokenPosn This _ }
	'is'           { TokenPosn Is _ }
	'('            { TokenPosn LParen _ }
	')'            { TokenPosn RParen _ }
	'and his friend'{ TokenPosn AndHisFriend _ }
	'put that'     { TokenPosn PutThat _ }
	'into'         { TokenPosn Into _ }
	'what is'      { TokenPosn WhatIs _ }
	'?'            { TokenPosn QuestionMark _ }
	'perhaps'      { TokenPosn Perhaps _ }
	'who cares'    { TokenPosn WhoCares _ }
	'which does'   { TokenPosn WhichDoes _ }
	'neg'          { TokenPosn Neg _ }
	'not'          { TokenPosn Not _ }
	'plus'         { TokenPosn Plus _ }
	'minus'        { TokenPosn Minus _ }
	'times'        { TokenPosn Mult _ }
	'split'        { TokenPosn Div _ }
	'rest'         { TokenPosn Mod _ }
	'weaker than'  { TokenPosn Lesser _ }
	'stronger than'{ TokenPosn Greater _ }
	'as weak as'   { TokenPosn LesserEq _ }
	'as strong as' { TokenPosn GreaterEq _ }
	'same as'      { TokenPosn Eq _ }
	'different of' { TokenPosn Neq _ }
	'both'         { TokenPosn And _ }
	'either'       { TokenPosn Or _ }
	'yep'          { TokenPosn Truthy _ }
	'pasyep'       { TokenPosn Falsy _ }
	'identifier'   { TokenPosn (Name $$) _ }
	'integer'      { TokenPosn (Integer $$) _ }
	'Integer'      { TokenPosn (Type "Integer") _ }
	'Boolean'      { TokenPosn (Type "Boolean") _ }
	'suppose'      { TokenPosn Suppose _ }
	'then we can conclude'{ TokenPosn ThenWeCanConclude _ }
	'rather than'  { TokenPosn RatherThan _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Statement       rules 1, 2
	Expr            rules 3, 4, 5, 6, 7, 8, 9, 10
	Definition      rules 11, 12
	FunctionDef     rule  13
	FArgs           rules 14, 15
	Args            rules 16, 17
	Arg             rules 18, 19
	Type            rules 20, 21, 22
	TypeTuple       rule  23
	FunctionApp     rules 24, 25
	FunctionAppArgs rules 26, 27
	FunctionAppArg  rule  28
	LetInDefs       rules 29, 30
	If              rule  31
	CaseOfs         rules 32, 33
	CaseOf          rule  34
	Pattern         rules 35, 36, 37
	Literal         rules 38, 39, 40, 41
	UnaryOp         rules 42, 43
	BinaryOp        rules 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . Statement                        (rule 0)

	'behold'       shift, and enter state 4
	'summon'       shift, and enter state 11
	'this'         shift, and enter state 5
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20

	Statement      goto state 6
	Expr           goto state 7
	Definition     goto state 2
	FunctionDef    goto state 3
	FunctionApp    goto state 8
	Literal        goto state 9
	UnaryOp        goto state 10

State 1

	Statement -> . Definition                           (rule 1)

	'behold'       shift, and enter state 4
	'this'         shift, and enter state 5

	Definition     goto state 2
	FunctionDef    goto state 3

State 2

	Statement -> Definition .                           (rule 1)

	%eof           reduce using rule 1


State 3

	Definition -> FunctionDef .                         (rule 11)

	'and'          reduce using rule 11
	'into'         reduce using rule 11
	%eof           reduce using rule 11


State 4

	FunctionDef -> 'behold' . 'identifier' FArgs 'which does' Expr    (rule 13)

	'identifier'   shift, and enter state 43


State 5

	Definition -> 'this' . 'identifier' 'is' Expr       (rule 12)

	'identifier'   shift, and enter state 42


State 6

	%start_parser -> Statement .                        (rule 0)

	%eof           accept


State 7

	Statement -> Expr .                                 (rule 2)
	Expr -> Expr . BinaryOp Expr                        (rule 7)

	'plus'         shift, and enter state 29
	'minus'        shift, and enter state 30
	'times'        shift, and enter state 31
	'split'        shift, and enter state 32
	'rest'         shift, and enter state 33
	'weaker than'  shift, and enter state 34
	'stronger than'shift, and enter state 35
	'as weak as'   shift, and enter state 36
	'as strong as' shift, and enter state 37
	'same as'      shift, and enter state 38
	'different of' shift, and enter state 39
	'both'         shift, and enter state 40
	'either'       shift, and enter state 41
	%eof           reduce using rule 2

	BinaryOp       goto state 28

State 8

	Expr -> FunctionApp .                               (rule 10)

	'and'          reduce using rule 10
	')'            reduce using rule 10
	'and his friend'reduce using rule 10
	'into'         reduce using rule 10
	'?'            reduce using rule 10
	'perhaps'      reduce using rule 10
	'plus'         reduce using rule 10
	'minus'        reduce using rule 10
	'times'        reduce using rule 10
	'split'        reduce using rule 10
	'rest'         reduce using rule 10
	'weaker than'  reduce using rule 10
	'stronger than'reduce using rule 10
	'as weak as'   reduce using rule 10
	'as strong as' reduce using rule 10
	'same as'      reduce using rule 10
	'different of' reduce using rule 10
	'both'         reduce using rule 10
	'either'       reduce using rule 10
	%eof           reduce using rule 10


State 9

	Expr -> Literal .                                   (rule 8)

	'and'          reduce using rule 8
	')'            reduce using rule 8
	'and his friend'reduce using rule 8
	'into'         reduce using rule 8
	'?'            reduce using rule 8
	'perhaps'      reduce using rule 8
	'plus'         reduce using rule 8
	'minus'        reduce using rule 8
	'times'        reduce using rule 8
	'split'        reduce using rule 8
	'rest'         reduce using rule 8
	'weaker than'  reduce using rule 8
	'stronger than'reduce using rule 8
	'as weak as'   reduce using rule 8
	'as strong as' reduce using rule 8
	'same as'      reduce using rule 8
	'different of' reduce using rule 8
	'both'         reduce using rule 8
	'either'       reduce using rule 8
	%eof           reduce using rule 8


State 10

	Expr -> UnaryOp . Expr                              (rule 6)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20

	Expr           goto state 27
	FunctionApp    goto state 8
	Literal        goto state 9
	UnaryOp        goto state 10

State 11

	FunctionApp -> 'summon' . 'identifier' 'with' FunctionAppArgs    (rule 24)
	FunctionApp -> 'summon' . 'identifier'              (rule 25)

	'identifier'   shift, and enter state 26


State 12

	Literal -> '(' . Expr 'and his friend' Expr ')'     (rule 41)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20

	Expr           goto state 25
	FunctionApp    goto state 8
	Literal        goto state 9
	UnaryOp        goto state 10

State 13

	Expr -> 'put that' . LetInDefs 'into' Expr          (rule 3)
	Expr -> 'put that' . 'into' Expr                    (rule 4)

	'behold'       shift, and enter state 4
	'this'         shift, and enter state 5
	'into'         shift, and enter state 24

	Definition     goto state 22
	FunctionDef    goto state 3
	LetInDefs      goto state 23

State 14

	Expr -> 'what is' . Expr '?' CaseOfs                (rule 5)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20

	Expr           goto state 21
	FunctionApp    goto state 8
	Literal        goto state 9
	UnaryOp        goto state 10

State 15

	UnaryOp -> 'neg' .                                  (rule 42)

	'summon'       reduce using rule 42
	'('            reduce using rule 42
	'put that'     reduce using rule 42
	'what is'      reduce using rule 42
	'neg'          reduce using rule 42
	'not'          reduce using rule 42
	'yep'          reduce using rule 42
	'pasyep'       reduce using rule 42
	'identifier'   reduce using rule 42
	'integer'      reduce using rule 42


State 16

	UnaryOp -> 'not' .                                  (rule 43)

	'summon'       reduce using rule 43
	'('            reduce using rule 43
	'put that'     reduce using rule 43
	'what is'      reduce using rule 43
	'neg'          reduce using rule 43
	'not'          reduce using rule 43
	'yep'          reduce using rule 43
	'pasyep'       reduce using rule 43
	'identifier'   reduce using rule 43
	'integer'      reduce using rule 43


State 17

	Literal -> 'yep' .                                  (rule 39)

	'and'          reduce using rule 39
	')'            reduce using rule 39
	'and his friend'reduce using rule 39
	'into'         reduce using rule 39
	'?'            reduce using rule 39
	'perhaps'      reduce using rule 39
	'which does'   reduce using rule 39
	'plus'         reduce using rule 39
	'minus'        reduce using rule 39
	'times'        reduce using rule 39
	'split'        reduce using rule 39
	'rest'         reduce using rule 39
	'weaker than'  reduce using rule 39
	'stronger than'reduce using rule 39
	'as weak as'   reduce using rule 39
	'as strong as' reduce using rule 39
	'same as'      reduce using rule 39
	'different of' reduce using rule 39
	'both'         reduce using rule 39
	'either'       reduce using rule 39
	%eof           reduce using rule 39


State 18

	Literal -> 'pasyep' .                               (rule 40)

	'and'          reduce using rule 40
	')'            reduce using rule 40
	'and his friend'reduce using rule 40
	'into'         reduce using rule 40
	'?'            reduce using rule 40
	'perhaps'      reduce using rule 40
	'which does'   reduce using rule 40
	'plus'         reduce using rule 40
	'minus'        reduce using rule 40
	'times'        reduce using rule 40
	'split'        reduce using rule 40
	'rest'         reduce using rule 40
	'weaker than'  reduce using rule 40
	'stronger than'reduce using rule 40
	'as weak as'   reduce using rule 40
	'as strong as' reduce using rule 40
	'same as'      reduce using rule 40
	'different of' reduce using rule 40
	'both'         reduce using rule 40
	'either'       reduce using rule 40
	%eof           reduce using rule 40


State 19

	Expr -> 'identifier' .                              (rule 9)

	'and'          reduce using rule 9
	')'            reduce using rule 9
	'and his friend'reduce using rule 9
	'into'         reduce using rule 9
	'?'            reduce using rule 9
	'perhaps'      reduce using rule 9
	'plus'         reduce using rule 9
	'minus'        reduce using rule 9
	'times'        reduce using rule 9
	'split'        reduce using rule 9
	'rest'         reduce using rule 9
	'weaker than'  reduce using rule 9
	'stronger than'reduce using rule 9
	'as weak as'   reduce using rule 9
	'as strong as' reduce using rule 9
	'same as'      reduce using rule 9
	'different of' reduce using rule 9
	'both'         reduce using rule 9
	'either'       reduce using rule 9
	%eof           reduce using rule 9


State 20

	Literal -> 'integer' .                              (rule 38)

	'and'          reduce using rule 38
	')'            reduce using rule 38
	'and his friend'reduce using rule 38
	'into'         reduce using rule 38
	'?'            reduce using rule 38
	'perhaps'      reduce using rule 38
	'which does'   reduce using rule 38
	'plus'         reduce using rule 38
	'minus'        reduce using rule 38
	'times'        reduce using rule 38
	'split'        reduce using rule 38
	'rest'         reduce using rule 38
	'weaker than'  reduce using rule 38
	'stronger than'reduce using rule 38
	'as weak as'   reduce using rule 38
	'as strong as' reduce using rule 38
	'same as'      reduce using rule 38
	'different of' reduce using rule 38
	'both'         reduce using rule 38
	'either'       reduce using rule 38
	%eof           reduce using rule 38


State 21

	Expr -> 'what is' Expr . '?' CaseOfs                (rule 5)
	Expr -> Expr . BinaryOp Expr                        (rule 7)

	'?'            shift, and enter state 53
	'plus'         shift, and enter state 29
	'minus'        shift, and enter state 30
	'times'        shift, and enter state 31
	'split'        shift, and enter state 32
	'rest'         shift, and enter state 33
	'weaker than'  shift, and enter state 34
	'stronger than'shift, and enter state 35
	'as weak as'   shift, and enter state 36
	'as strong as' shift, and enter state 37
	'same as'      shift, and enter state 38
	'different of' shift, and enter state 39
	'both'         shift, and enter state 40
	'either'       shift, and enter state 41

	BinaryOp       goto state 28

State 22

	LetInDefs -> Definition .                           (rule 29)

	'and'          reduce using rule 29
	'into'         reduce using rule 29


State 23

	Expr -> 'put that' LetInDefs . 'into' Expr          (rule 3)
	LetInDefs -> LetInDefs . 'and' Definition           (rule 30)

	'and'          shift, and enter state 51
	'into'         shift, and enter state 52


State 24

	Expr -> 'put that' 'into' . Expr                    (rule 4)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20

	Expr           goto state 50
	FunctionApp    goto state 8
	Literal        goto state 9
	UnaryOp        goto state 10

State 25

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	Literal -> '(' Expr . 'and his friend' Expr ')'     (rule 41)

	'and his friend'shift, and enter state 49
	'plus'         shift, and enter state 29
	'minus'        shift, and enter state 30
	'times'        shift, and enter state 31
	'split'        shift, and enter state 32
	'rest'         shift, and enter state 33
	'weaker than'  shift, and enter state 34
	'stronger than'shift, and enter state 35
	'as weak as'   shift, and enter state 36
	'as strong as' shift, and enter state 37
	'same as'      shift, and enter state 38
	'different of' shift, and enter state 39
	'both'         shift, and enter state 40
	'either'       shift, and enter state 41

	BinaryOp       goto state 28

State 26

	FunctionApp -> 'summon' 'identifier' . 'with' FunctionAppArgs    (rule 24)
	FunctionApp -> 'summon' 'identifier' .              (rule 25)

	'with'         shift, and enter state 48
	'and'          reduce using rule 25
	')'            reduce using rule 25
	'and his friend'reduce using rule 25
	'into'         reduce using rule 25
	'?'            reduce using rule 25
	'perhaps'      reduce using rule 25
	'plus'         reduce using rule 25
	'minus'        reduce using rule 25
	'times'        reduce using rule 25
	'split'        reduce using rule 25
	'rest'         reduce using rule 25
	'weaker than'  reduce using rule 25
	'stronger than'reduce using rule 25
	'as weak as'   reduce using rule 25
	'as strong as' reduce using rule 25
	'same as'      reduce using rule 25
	'different of' reduce using rule 25
	'both'         reduce using rule 25
	'either'       reduce using rule 25
	%eof           reduce using rule 25


State 27

	Expr -> UnaryOp Expr .                              (rule 6)
	Expr -> Expr . BinaryOp Expr                        (rule 7)

	'and'          reduce using rule 6
	')'            reduce using rule 6
	'and his friend'reduce using rule 6
	'into'         reduce using rule 6
	'?'            reduce using rule 6
	'perhaps'      reduce using rule 6
	'plus'         shift, and enter state 29
			(reduce using rule 6)

	'minus'        shift, and enter state 30
			(reduce using rule 6)

	'times'        shift, and enter state 31
			(reduce using rule 6)

	'split'        shift, and enter state 32
			(reduce using rule 6)

	'rest'         shift, and enter state 33
			(reduce using rule 6)

	'weaker than'  shift, and enter state 34
			(reduce using rule 6)

	'stronger than'shift, and enter state 35
			(reduce using rule 6)

	'as weak as'   shift, and enter state 36
			(reduce using rule 6)

	'as strong as' shift, and enter state 37
			(reduce using rule 6)

	'same as'      shift, and enter state 38
			(reduce using rule 6)

	'different of' shift, and enter state 39
			(reduce using rule 6)

	'both'         shift, and enter state 40
			(reduce using rule 6)

	'either'       shift, and enter state 41
			(reduce using rule 6)

	%eof           reduce using rule 6

	BinaryOp       goto state 28

State 28

	Expr -> Expr BinaryOp . Expr                        (rule 7)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20

	Expr           goto state 47
	FunctionApp    goto state 8
	Literal        goto state 9
	UnaryOp        goto state 10

State 29

	BinaryOp -> 'plus' .                                (rule 44)

	'summon'       reduce using rule 44
	'('            reduce using rule 44
	'put that'     reduce using rule 44
	'what is'      reduce using rule 44
	'neg'          reduce using rule 44
	'not'          reduce using rule 44
	'yep'          reduce using rule 44
	'pasyep'       reduce using rule 44
	'identifier'   reduce using rule 44
	'integer'      reduce using rule 44


State 30

	BinaryOp -> 'minus' .                               (rule 45)

	'summon'       reduce using rule 45
	'('            reduce using rule 45
	'put that'     reduce using rule 45
	'what is'      reduce using rule 45
	'neg'          reduce using rule 45
	'not'          reduce using rule 45
	'yep'          reduce using rule 45
	'pasyep'       reduce using rule 45
	'identifier'   reduce using rule 45
	'integer'      reduce using rule 45


State 31

	BinaryOp -> 'times' .                               (rule 46)

	'summon'       reduce using rule 46
	'('            reduce using rule 46
	'put that'     reduce using rule 46
	'what is'      reduce using rule 46
	'neg'          reduce using rule 46
	'not'          reduce using rule 46
	'yep'          reduce using rule 46
	'pasyep'       reduce using rule 46
	'identifier'   reduce using rule 46
	'integer'      reduce using rule 46


State 32

	BinaryOp -> 'split' .                               (rule 47)

	'summon'       reduce using rule 47
	'('            reduce using rule 47
	'put that'     reduce using rule 47
	'what is'      reduce using rule 47
	'neg'          reduce using rule 47
	'not'          reduce using rule 47
	'yep'          reduce using rule 47
	'pasyep'       reduce using rule 47
	'identifier'   reduce using rule 47
	'integer'      reduce using rule 47


State 33

	BinaryOp -> 'rest' .                                (rule 48)

	'summon'       reduce using rule 48
	'('            reduce using rule 48
	'put that'     reduce using rule 48
	'what is'      reduce using rule 48
	'neg'          reduce using rule 48
	'not'          reduce using rule 48
	'yep'          reduce using rule 48
	'pasyep'       reduce using rule 48
	'identifier'   reduce using rule 48
	'integer'      reduce using rule 48


State 34

	BinaryOp -> 'weaker than' .                         (rule 49)

	'summon'       reduce using rule 49
	'('            reduce using rule 49
	'put that'     reduce using rule 49
	'what is'      reduce using rule 49
	'neg'          reduce using rule 49
	'not'          reduce using rule 49
	'yep'          reduce using rule 49
	'pasyep'       reduce using rule 49
	'identifier'   reduce using rule 49
	'integer'      reduce using rule 49


State 35

	BinaryOp -> 'stronger than' .                       (rule 50)

	'summon'       reduce using rule 50
	'('            reduce using rule 50
	'put that'     reduce using rule 50
	'what is'      reduce using rule 50
	'neg'          reduce using rule 50
	'not'          reduce using rule 50
	'yep'          reduce using rule 50
	'pasyep'       reduce using rule 50
	'identifier'   reduce using rule 50
	'integer'      reduce using rule 50


State 36

	BinaryOp -> 'as weak as' .                          (rule 51)

	'summon'       reduce using rule 51
	'('            reduce using rule 51
	'put that'     reduce using rule 51
	'what is'      reduce using rule 51
	'neg'          reduce using rule 51
	'not'          reduce using rule 51
	'yep'          reduce using rule 51
	'pasyep'       reduce using rule 51
	'identifier'   reduce using rule 51
	'integer'      reduce using rule 51


State 37

	BinaryOp -> 'as strong as' .                        (rule 52)

	'summon'       reduce using rule 52
	'('            reduce using rule 52
	'put that'     reduce using rule 52
	'what is'      reduce using rule 52
	'neg'          reduce using rule 52
	'not'          reduce using rule 52
	'yep'          reduce using rule 52
	'pasyep'       reduce using rule 52
	'identifier'   reduce using rule 52
	'integer'      reduce using rule 52


State 38

	BinaryOp -> 'same as' .                             (rule 53)

	'summon'       reduce using rule 53
	'('            reduce using rule 53
	'put that'     reduce using rule 53
	'what is'      reduce using rule 53
	'neg'          reduce using rule 53
	'not'          reduce using rule 53
	'yep'          reduce using rule 53
	'pasyep'       reduce using rule 53
	'identifier'   reduce using rule 53
	'integer'      reduce using rule 53


State 39

	BinaryOp -> 'different of' .                        (rule 54)

	'summon'       reduce using rule 54
	'('            reduce using rule 54
	'put that'     reduce using rule 54
	'what is'      reduce using rule 54
	'neg'          reduce using rule 54
	'not'          reduce using rule 54
	'yep'          reduce using rule 54
	'pasyep'       reduce using rule 54
	'identifier'   reduce using rule 54
	'integer'      reduce using rule 54


State 40

	BinaryOp -> 'both' .                                (rule 55)

	'summon'       reduce using rule 55
	'('            reduce using rule 55
	'put that'     reduce using rule 55
	'what is'      reduce using rule 55
	'neg'          reduce using rule 55
	'not'          reduce using rule 55
	'yep'          reduce using rule 55
	'pasyep'       reduce using rule 55
	'identifier'   reduce using rule 55
	'integer'      reduce using rule 55


State 41

	BinaryOp -> 'either' .                              (rule 56)

	'summon'       reduce using rule 56
	'('            reduce using rule 56
	'put that'     reduce using rule 56
	'what is'      reduce using rule 56
	'neg'          reduce using rule 56
	'not'          reduce using rule 56
	'yep'          reduce using rule 56
	'pasyep'       reduce using rule 56
	'identifier'   reduce using rule 56
	'integer'      reduce using rule 56


State 42

	Definition -> 'this' 'identifier' . 'is' Expr       (rule 12)

	'is'           shift, and enter state 46


State 43

	FunctionDef -> 'behold' 'identifier' . FArgs 'which does' Expr    (rule 13)

	'with'         shift, and enter state 45
	'which does'   reduce using rule 14

	FArgs          goto state 44

State 44

	FunctionDef -> 'behold' 'identifier' FArgs . 'which does' Expr    (rule 13)

	'which does'   shift, and enter state 71


State 45

	FArgs -> 'with' . Args                              (rule 15)

	'('            shift, and enter state 68
	'Integer'      shift, and enter state 69
	'Boolean'      shift, and enter state 70

	Args           goto state 64
	Arg            goto state 65
	Type           goto state 66
	TypeTuple      goto state 67

State 46

	Definition -> 'this' 'identifier' 'is' . Expr       (rule 12)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20

	Expr           goto state 63
	FunctionApp    goto state 8
	Literal        goto state 9
	UnaryOp        goto state 10

State 47

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	Expr -> Expr BinaryOp Expr .                        (rule 7)

	'and'          reduce using rule 7
	')'            reduce using rule 7
	'and his friend'reduce using rule 7
	'into'         reduce using rule 7
	'?'            reduce using rule 7
	'perhaps'      reduce using rule 7
	'plus'         shift, and enter state 29
			(reduce using rule 7)

	'minus'        shift, and enter state 30
			(reduce using rule 7)

	'times'        shift, and enter state 31
			(reduce using rule 7)

	'split'        shift, and enter state 32
			(reduce using rule 7)

	'rest'         shift, and enter state 33
			(reduce using rule 7)

	'weaker than'  shift, and enter state 34
			(reduce using rule 7)

	'stronger than'shift, and enter state 35
			(reduce using rule 7)

	'as weak as'   shift, and enter state 36
			(reduce using rule 7)

	'as strong as' shift, and enter state 37
			(reduce using rule 7)

	'same as'      shift, and enter state 38
			(reduce using rule 7)

	'different of' shift, and enter state 39
			(reduce using rule 7)

	'both'         shift, and enter state 40
			(reduce using rule 7)

	'either'       shift, and enter state 41
			(reduce using rule 7)

	%eof           reduce using rule 7

	BinaryOp       goto state 28

State 48

	FunctionApp -> 'summon' 'identifier' 'with' . FunctionAppArgs    (rule 24)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20

	Expr           goto state 60
	FunctionApp    goto state 8
	FunctionAppArgsgoto state 61
	FunctionAppArg goto state 62
	Literal        goto state 9
	UnaryOp        goto state 10

State 49

	Literal -> '(' Expr 'and his friend' . Expr ')'     (rule 41)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20

	Expr           goto state 59
	FunctionApp    goto state 8
	Literal        goto state 9
	UnaryOp        goto state 10

State 50

	Expr -> 'put that' 'into' Expr .                    (rule 4)
	Expr -> Expr . BinaryOp Expr                        (rule 7)

	'and'          reduce using rule 4
	')'            reduce using rule 4
	'and his friend'reduce using rule 4
	'into'         reduce using rule 4
	'?'            reduce using rule 4
	'perhaps'      reduce using rule 4
	'plus'         shift, and enter state 29
	'minus'        shift, and enter state 30
	'times'        shift, and enter state 31
	'split'        shift, and enter state 32
	'rest'         shift, and enter state 33
	'weaker than'  shift, and enter state 34
	'stronger than'shift, and enter state 35
	'as weak as'   shift, and enter state 36
	'as strong as' shift, and enter state 37
	'same as'      shift, and enter state 38
	'different of' shift, and enter state 39
	'both'         shift, and enter state 40
	'either'       shift, and enter state 41
	%eof           reduce using rule 4

	BinaryOp       goto state 28

State 51

	LetInDefs -> LetInDefs 'and' . Definition           (rule 30)

	'behold'       shift, and enter state 4
	'this'         shift, and enter state 5

	Definition     goto state 58
	FunctionDef    goto state 3

State 52

	Expr -> 'put that' LetInDefs 'into' . Expr          (rule 3)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20

	Expr           goto state 57
	FunctionApp    goto state 8
	Literal        goto state 9
	UnaryOp        goto state 10

State 53

	Expr -> 'what is' Expr '?' . CaseOfs                (rule 5)

	'perhaps'      shift, and enter state 56

	CaseOfs        goto state 54
	CaseOf         goto state 55

State 54

	Expr -> 'what is' Expr '?' CaseOfs .                (rule 5)

	'and'          reduce using rule 5
	')'            reduce using rule 5
	'and his friend'reduce using rule 5
	'into'         reduce using rule 5
	'?'            reduce using rule 5
	'perhaps'      reduce using rule 5
	'plus'         reduce using rule 5
	'minus'        reduce using rule 5
	'times'        reduce using rule 5
	'split'        reduce using rule 5
	'rest'         reduce using rule 5
	'weaker than'  reduce using rule 5
	'stronger than'reduce using rule 5
	'as weak as'   reduce using rule 5
	'as strong as' reduce using rule 5
	'same as'      reduce using rule 5
	'different of' reduce using rule 5
	'both'         reduce using rule 5
	'either'       reduce using rule 5
	%eof           reduce using rule 5


State 55

	CaseOfs -> CaseOf .                                 (rule 32)
	CaseOfs -> CaseOf . CaseOfs                         (rule 33)

	'and'          reduce using rule 32
	')'            reduce using rule 32
	'and his friend'reduce using rule 32
	'into'         reduce using rule 32
	'?'            reduce using rule 32
	'perhaps'      shift, and enter state 56
			(reduce using rule 32)

	'plus'         reduce using rule 32
	'minus'        reduce using rule 32
	'times'        reduce using rule 32
	'split'        reduce using rule 32
	'rest'         reduce using rule 32
	'weaker than'  reduce using rule 32
	'stronger than'reduce using rule 32
	'as weak as'   reduce using rule 32
	'as strong as' reduce using rule 32
	'same as'      reduce using rule 32
	'different of' reduce using rule 32
	'both'         reduce using rule 32
	'either'       reduce using rule 32
	%eof           reduce using rule 32

	CaseOfs        goto state 83
	CaseOf         goto state 55

State 56

	CaseOf -> 'perhaps' . Pattern 'which does' Expr     (rule 34)

	'('            shift, and enter state 12
	'who cares'    shift, and enter state 81
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 82
	'integer'      shift, and enter state 20

	Pattern        goto state 79
	Literal        goto state 80

State 57

	Expr -> 'put that' LetInDefs 'into' Expr .          (rule 3)
	Expr -> Expr . BinaryOp Expr                        (rule 7)

	'and'          reduce using rule 3
	')'            reduce using rule 3
	'and his friend'reduce using rule 3
	'into'         reduce using rule 3
	'?'            reduce using rule 3
	'perhaps'      reduce using rule 3
	'plus'         shift, and enter state 29
	'minus'        shift, and enter state 30
	'times'        shift, and enter state 31
	'split'        shift, and enter state 32
	'rest'         shift, and enter state 33
	'weaker than'  shift, and enter state 34
	'stronger than'shift, and enter state 35
	'as weak as'   shift, and enter state 36
	'as strong as' shift, and enter state 37
	'same as'      shift, and enter state 38
	'different of' shift, and enter state 39
	'both'         shift, and enter state 40
	'either'       shift, and enter state 41
	%eof           reduce using rule 3

	BinaryOp       goto state 28

State 58

	LetInDefs -> LetInDefs 'and' Definition .           (rule 30)

	'and'          reduce using rule 30
	'into'         reduce using rule 30


State 59

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	Literal -> '(' Expr 'and his friend' Expr . ')'     (rule 41)

	')'            shift, and enter state 78
	'plus'         shift, and enter state 29
	'minus'        shift, and enter state 30
	'times'        shift, and enter state 31
	'split'        shift, and enter state 32
	'rest'         shift, and enter state 33
	'weaker than'  shift, and enter state 34
	'stronger than'shift, and enter state 35
	'as weak as'   shift, and enter state 36
	'as strong as' shift, and enter state 37
	'same as'      shift, and enter state 38
	'different of' shift, and enter state 39
	'both'         shift, and enter state 40
	'either'       shift, and enter state 41

	BinaryOp       goto state 28

State 60

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	FunctionAppArg -> Expr .                            (rule 28)

	'and'          reduce using rule 28
	')'            reduce using rule 28
	'and his friend'reduce using rule 28
	'into'         reduce using rule 28
	'?'            reduce using rule 28
	'perhaps'      reduce using rule 28
	'plus'         shift, and enter state 29
			(reduce using rule 28)

	'minus'        shift, and enter state 30
			(reduce using rule 28)

	'times'        shift, and enter state 31
			(reduce using rule 28)

	'split'        shift, and enter state 32
			(reduce using rule 28)

	'rest'         shift, and enter state 33
			(reduce using rule 28)

	'weaker than'  shift, and enter state 34
			(reduce using rule 28)

	'stronger than'shift, and enter state 35
			(reduce using rule 28)

	'as weak as'   shift, and enter state 36
			(reduce using rule 28)

	'as strong as' shift, and enter state 37
			(reduce using rule 28)

	'same as'      shift, and enter state 38
			(reduce using rule 28)

	'different of' shift, and enter state 39
			(reduce using rule 28)

	'both'         shift, and enter state 40
			(reduce using rule 28)

	'either'       shift, and enter state 41
			(reduce using rule 28)

	%eof           reduce using rule 28

	BinaryOp       goto state 28

State 61

	FunctionApp -> 'summon' 'identifier' 'with' FunctionAppArgs .    (rule 24)
	FunctionAppArgs -> FunctionAppArgs . 'and' FunctionAppArg    (rule 27)

	'and'          shift, and enter state 77
			(reduce using rule 24)

	')'            reduce using rule 24
	'and his friend'reduce using rule 24
	'into'         reduce using rule 24
	'?'            reduce using rule 24
	'perhaps'      reduce using rule 24
	'plus'         reduce using rule 24
	'minus'        reduce using rule 24
	'times'        reduce using rule 24
	'split'        reduce using rule 24
	'rest'         reduce using rule 24
	'weaker than'  reduce using rule 24
	'stronger than'reduce using rule 24
	'as weak as'   reduce using rule 24
	'as strong as' reduce using rule 24
	'same as'      reduce using rule 24
	'different of' reduce using rule 24
	'both'         reduce using rule 24
	'either'       reduce using rule 24
	%eof           reduce using rule 24


State 62

	FunctionAppArgs -> FunctionAppArg .                 (rule 26)

	'and'          reduce using rule 26
	')'            reduce using rule 26
	'and his friend'reduce using rule 26
	'into'         reduce using rule 26
	'?'            reduce using rule 26
	'perhaps'      reduce using rule 26
	'plus'         reduce using rule 26
	'minus'        reduce using rule 26
	'times'        reduce using rule 26
	'split'        reduce using rule 26
	'rest'         reduce using rule 26
	'weaker than'  reduce using rule 26
	'stronger than'reduce using rule 26
	'as weak as'   reduce using rule 26
	'as strong as' reduce using rule 26
	'same as'      reduce using rule 26
	'different of' reduce using rule 26
	'both'         reduce using rule 26
	'either'       reduce using rule 26
	%eof           reduce using rule 26


State 63

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	Definition -> 'this' 'identifier' 'is' Expr .       (rule 12)

	'and'          reduce using rule 12
	'into'         reduce using rule 12
	'plus'         shift, and enter state 29
	'minus'        shift, and enter state 30
	'times'        shift, and enter state 31
	'split'        shift, and enter state 32
	'rest'         shift, and enter state 33
	'weaker than'  shift, and enter state 34
	'stronger than'shift, and enter state 35
	'as weak as'   shift, and enter state 36
	'as strong as' shift, and enter state 37
	'same as'      shift, and enter state 38
	'different of' shift, and enter state 39
	'both'         shift, and enter state 40
	'either'       shift, and enter state 41
	%eof           reduce using rule 12

	BinaryOp       goto state 28

State 64

	FArgs -> 'with' Args .                              (rule 15)
	Args -> Args . 'and' Arg                            (rule 17)

	'and'          shift, and enter state 76
	'which does'   reduce using rule 15


State 65

	Args -> Arg .                                       (rule 16)

	'and'          reduce using rule 16
	'which does'   reduce using rule 16


State 66

	Arg -> Type . 'identifier'                          (rule 18)

	'identifier'   shift, and enter state 75


State 67

	Arg -> TypeTuple .                                  (rule 19)
	Type -> TypeTuple .                                 (rule 22)

	'and'          reduce using rule 19
	'which does'   reduce using rule 19
	'identifier'   reduce using rule 22


State 68

	TypeTuple -> '(' . Type 'and his friend' Type ')'    (rule 23)

	'('            shift, and enter state 68
	'Integer'      shift, and enter state 69
	'Boolean'      shift, and enter state 70

	Type           goto state 73
	TypeTuple      goto state 74

State 69

	Type -> 'Integer' .                                 (rule 20)

	')'            reduce using rule 20
	'and his friend'reduce using rule 20
	'identifier'   reduce using rule 20


State 70

	Type -> 'Boolean' .                                 (rule 21)

	')'            reduce using rule 21
	'and his friend'reduce using rule 21
	'identifier'   reduce using rule 21


State 71

	FunctionDef -> 'behold' 'identifier' FArgs 'which does' . Expr    (rule 13)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20

	Expr           goto state 72
	FunctionApp    goto state 8
	Literal        goto state 9
	UnaryOp        goto state 10

State 72

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	FunctionDef -> 'behold' 'identifier' FArgs 'which does' Expr .    (rule 13)

	'and'          reduce using rule 13
	'into'         reduce using rule 13
	'plus'         shift, and enter state 29
	'minus'        shift, and enter state 30
	'times'        shift, and enter state 31
	'split'        shift, and enter state 32
	'rest'         shift, and enter state 33
	'weaker than'  shift, and enter state 34
	'stronger than'shift, and enter state 35
	'as weak as'   shift, and enter state 36
	'as strong as' shift, and enter state 37
	'same as'      shift, and enter state 38
	'different of' shift, and enter state 39
	'both'         shift, and enter state 40
	'either'       shift, and enter state 41
	%eof           reduce using rule 13

	BinaryOp       goto state 28

State 73

	TypeTuple -> '(' Type . 'and his friend' Type ')'    (rule 23)

	'and his friend'shift, and enter state 87


State 74

	Type -> TypeTuple .                                 (rule 22)

	')'            reduce using rule 22
	'and his friend'reduce using rule 22


State 75

	Arg -> Type 'identifier' .                          (rule 18)

	'and'          reduce using rule 18
	'which does'   reduce using rule 18


State 76

	Args -> Args 'and' . Arg                            (rule 17)

	'('            shift, and enter state 68
	'Integer'      shift, and enter state 69
	'Boolean'      shift, and enter state 70

	Arg            goto state 86
	Type           goto state 66
	TypeTuple      goto state 67

State 77

	FunctionAppArgs -> FunctionAppArgs 'and' . FunctionAppArg    (rule 27)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20

	Expr           goto state 60
	FunctionApp    goto state 8
	FunctionAppArg goto state 85
	Literal        goto state 9
	UnaryOp        goto state 10

State 78

	Literal -> '(' Expr 'and his friend' Expr ')' .     (rule 41)

	'and'          reduce using rule 41
	')'            reduce using rule 41
	'and his friend'reduce using rule 41
	'into'         reduce using rule 41
	'?'            reduce using rule 41
	'perhaps'      reduce using rule 41
	'which does'   reduce using rule 41
	'plus'         reduce using rule 41
	'minus'        reduce using rule 41
	'times'        reduce using rule 41
	'split'        reduce using rule 41
	'rest'         reduce using rule 41
	'weaker than'  reduce using rule 41
	'stronger than'reduce using rule 41
	'as weak as'   reduce using rule 41
	'as strong as' reduce using rule 41
	'same as'      reduce using rule 41
	'different of' reduce using rule 41
	'both'         reduce using rule 41
	'either'       reduce using rule 41
	%eof           reduce using rule 41


State 79

	CaseOf -> 'perhaps' Pattern . 'which does' Expr     (rule 34)

	'which does'   shift, and enter state 84


State 80

	Pattern -> Literal .                                (rule 37)

	'which does'   reduce using rule 37


State 81

	Pattern -> 'who cares' .                            (rule 35)

	'which does'   reduce using rule 35


State 82

	Pattern -> 'identifier' .                           (rule 36)

	'which does'   reduce using rule 36


State 83

	CaseOfs -> CaseOf CaseOfs .                         (rule 33)

	'and'          reduce using rule 33
	')'            reduce using rule 33
	'and his friend'reduce using rule 33
	'into'         reduce using rule 33
	'?'            reduce using rule 33
	'perhaps'      reduce using rule 33
	'plus'         reduce using rule 33
	'minus'        reduce using rule 33
	'times'        reduce using rule 33
	'split'        reduce using rule 33
	'rest'         reduce using rule 33
	'weaker than'  reduce using rule 33
	'stronger than'reduce using rule 33
	'as weak as'   reduce using rule 33
	'as strong as' reduce using rule 33
	'same as'      reduce using rule 33
	'different of' reduce using rule 33
	'both'         reduce using rule 33
	'either'       reduce using rule 33
	%eof           reduce using rule 33


State 84

	CaseOf -> 'perhaps' Pattern 'which does' . Expr     (rule 34)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20

	Expr           goto state 89
	FunctionApp    goto state 8
	Literal        goto state 9
	UnaryOp        goto state 10

State 85

	FunctionAppArgs -> FunctionAppArgs 'and' FunctionAppArg .    (rule 27)

	'and'          reduce using rule 27
	')'            reduce using rule 27
	'and his friend'reduce using rule 27
	'into'         reduce using rule 27
	'?'            reduce using rule 27
	'perhaps'      reduce using rule 27
	'plus'         reduce using rule 27
	'minus'        reduce using rule 27
	'times'        reduce using rule 27
	'split'        reduce using rule 27
	'rest'         reduce using rule 27
	'weaker than'  reduce using rule 27
	'stronger than'reduce using rule 27
	'as weak as'   reduce using rule 27
	'as strong as' reduce using rule 27
	'same as'      reduce using rule 27
	'different of' reduce using rule 27
	'both'         reduce using rule 27
	'either'       reduce using rule 27
	%eof           reduce using rule 27


State 86

	Args -> Args 'and' Arg .                            (rule 17)

	'and'          reduce using rule 17
	'which does'   reduce using rule 17


State 87

	TypeTuple -> '(' Type 'and his friend' . Type ')'    (rule 23)

	'('            shift, and enter state 68
	'Integer'      shift, and enter state 69
	'Boolean'      shift, and enter state 70

	Type           goto state 88
	TypeTuple      goto state 74

State 88

	TypeTuple -> '(' Type 'and his friend' Type . ')'    (rule 23)

	')'            shift, and enter state 90


State 89

	Expr -> Expr . BinaryOp Expr                        (rule 7)
	CaseOf -> 'perhaps' Pattern 'which does' Expr .     (rule 34)

	'and'          reduce using rule 34
	')'            reduce using rule 34
	'and his friend'reduce using rule 34
	'into'         reduce using rule 34
	'?'            reduce using rule 34
	'perhaps'      reduce using rule 34
	'plus'         shift, and enter state 29
			(reduce using rule 34)

	'minus'        shift, and enter state 30
			(reduce using rule 34)

	'times'        shift, and enter state 31
			(reduce using rule 34)

	'split'        shift, and enter state 32
			(reduce using rule 34)

	'rest'         shift, and enter state 33
			(reduce using rule 34)

	'weaker than'  shift, and enter state 34
			(reduce using rule 34)

	'stronger than'shift, and enter state 35
			(reduce using rule 34)

	'as weak as'   shift, and enter state 36
			(reduce using rule 34)

	'as strong as' shift, and enter state 37
			(reduce using rule 34)

	'same as'      shift, and enter state 38
			(reduce using rule 34)

	'different of' shift, and enter state 39
			(reduce using rule 34)

	'both'         shift, and enter state 40
			(reduce using rule 34)

	'either'       shift, and enter state 41
			(reduce using rule 34)

	%eof           reduce using rule 34

	BinaryOp       goto state 28

State 90

	TypeTuple -> '(' Type 'and his friend' Type ')' .    (rule 23)

	'and'          reduce using rule 23
	')'            reduce using rule 23
	'and his friend'reduce using rule 23
	'which does'   reduce using rule 23
	'identifier'   reduce using rule 23


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 57
Number of terminals: 40
Number of non-terminals: 21
Number of states: 91
