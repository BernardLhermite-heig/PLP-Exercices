Statement		-> Definition | Expr

Definition		-> FunctionDef | VariableDef
FunctionDef		-> 'behold' FunctionName ('with' Args)? 'which does' Expr
FunctionName 	-> Identifier
Args			-> Arg | Arg 'and' Args
Arg				-> Identifier
VariableDef		-> 'this' VariableName 'is' Expr
VariableName	-> Identifier
Identifier		-> Alpha+

Digit 			-> [0-9]
Integer			-> Digit | Digit Digits
Alpha			-> UpperChar | LowerChar
UpperChar 		-> [A-Z]
LowerChar		-> [a-z]
Boolean			-> yep | pasyep
Tuple			-> '(' Expr 'and his friend' Expr ')'

VariableOcc		-> VariableName	-- utile?

FunctionApp		-> FunctionName ('with' FunctionAppArgs)?
FunctionAppArgs	-> FunctionAppArg | FunctionAppArg 'and' FunctionAppArgs
FunctionAppArg	-> Expr

LetIn			-> 'put that' (Definition)* 'into' Expr 
LetInDefs		-> LetInDef | LetInDef 'and' LetInDefs
LetInDef		-> Definition

Case 			-> 'what is' Expr '?' CaseOfs
CaseOfs			-> CaseOf | CaseOf CaseOfs
CaseOf			-> 'perhaps' CaseOfPattern 'which does' Expr
CaseOfPattern	-> 'who cares' | VariableName | Literal

Literal			-> Integer | Boolean | Tuple

UnaryOp 		-> neg | not
BinaryOp		-> plus | minus | times | split | rest 
				 | weaker than | stronger than | as weak as | as strong as 
				 | same as | different of | both | either

Expr			-> LetIn
				 | CaseOf
				 | UnaryOp Expr
				 | Expr BinaryOp Expr
				 | Literal
				 | VariableOcc
				 | FunctionApp
	
