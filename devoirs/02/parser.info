-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.0 from parser.y
-----------------------------------------------------------------------------

state 72 contains 1 shift/reduce conflicts.
state 77 contains 13 shift/reduce conflicts.
state 78 contains 1 shift/reduce conflicts.
state 104 contains 13 shift/reduce conflicts.
state 107 contains 1 reduce/reduce conflicts.
state 109 contains 1 reduce/reduce conflicts.
state 117 contains 13 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parser -> Statement                         (0)
	Statement -> Definition                            (1)
	Statement -> Expr                                  (2)
	Expr -> 'put that' LetInDefs 'into' Expr           (3)
	Expr -> 'put that' 'into' Expr                     (4)
	Expr -> 'what is' Expr '?' CaseOfs                 (5)
	Expr -> 'neg' Expr                                 (6)
	Expr -> 'not' Expr                                 (7)
	Expr -> Expr 'times' Expr                          (8)
	Expr -> Expr 'split' Expr                          (9)
	Expr -> Expr 'rest' Expr                           (10)
	Expr -> Expr 'plus' Expr                           (11)
	Expr -> Expr 'minus' Expr                          (12)
	Expr -> Expr 'weaker than' Expr                    (13)
	Expr -> Expr 'stronger than' Expr                  (14)
	Expr -> Expr 'as weak as' Expr                     (15)
	Expr -> Expr 'as strong as' Expr                   (16)
	Expr -> Expr 'same as' Expr                        (17)
	Expr -> Expr 'different of' Expr                   (18)
	Expr -> Expr 'both' Expr                           (19)
	Expr -> Expr 'either' Expr                         (20)
	Expr -> Literal                                    (21)
	Expr -> 'identifier'                               (22)
	Expr -> FunctionApp                                (23)
	Expr -> If                                         (24)
	Expr -> '(' Expr ')'                               (25)
	Definition -> FunctionDef                          (26)
	Definition -> 'this' 'identifier' 'is' Expr        (27)
	FunctionDef -> 'behold' 'identifier' FArgs 'which does' Expr   (28)
	FArgs ->                                           (29)
	FArgs -> 'with' Args                               (30)
	Args -> Arg                                        (31)
	Args -> Args 'and' Arg                             (32)
	Arg -> Type 'identifier'                           (33)
	Arg -> 'identifier' '(' Arg 'and his friend' Arg ')'   (34)
	Type -> 'Integer'                                  (35)
	Type -> 'Boolean'                                  (36)
	Type -> TypeTuple                                  (37)
	TypeTuple -> '(' Type 'and his friend' Type ')'    (38)
	FunctionApp -> 'summon' 'identifier' 'with' FunctionAppArgs   (39)
	FunctionApp -> 'summon' 'identifier'               (40)
	FunctionAppArgs -> FunctionAppArg                  (41)
	FunctionAppArgs -> FunctionAppArgs 'and' FunctionAppArg   (42)
	FunctionAppArg -> Expr                             (43)
	LetInDefs -> Definition                            (44)
	LetInDefs -> LetInDefs 'and' Definition            (45)
	If -> 'suppose' Expr 'then we can conclude' Expr 'rather than' Expr   (46)
	CaseOfs -> CaseOf                                  (47)
	CaseOfs -> CaseOf CaseOfs                          (48)
	CaseOf -> 'perhaps' Pattern 'which does' Expr      (49)
	Pattern -> 'who cares'                             (50)
	Pattern -> 'identifier'                            (51)
	Pattern -> '(' Pattern 'and his friend' Pattern ')'   (52)
	Pattern -> Literal                                 (53)
	Literal -> 'integer'                               (54)
	Literal -> 'yep'                                   (55)
	Literal -> 'pasyep'                                (56)
	Literal -> '(' Expr 'and his friend' Expr ')'      (57)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'behold'       { TokenPosn Behold _ _ }
	'summon'       { TokenPosn Summon _ _ }
	'with'         { TokenPosn With _ _ }
	'and'          { TokenPosn AndParam _ _ }
	'this'         { TokenPosn This _ _ }
	'is'           { TokenPosn Is _ _ }
	'('            { TokenPosn LParen _ _ }
	')'            { TokenPosn RParen _ _ }
	'and his friend'{ TokenPosn AndHisFriend _ _ }
	'put that'     { TokenPosn PutThat _ _ }
	'into'         { TokenPosn Into _ _ }
	'what is'      { TokenPosn WhatIs _ _ }
	'?'            { TokenPosn QuestionMark _ _ }
	'perhaps'      { TokenPosn Perhaps _ _ }
	'who cares'    { TokenPosn WhoCares _ _ }
	'which does'   { TokenPosn WhichDoes _ _ }
	'neg'          { TokenPosn Neg _ _ }
	'not'          { TokenPosn Not _ _ }
	'plus'         { TokenPosn Plus _ _ }
	'minus'        { TokenPosn Minus _ _ }
	'times'        { TokenPosn Mult _ _ }
	'split'        { TokenPosn Div _ _ }
	'rest'         { TokenPosn Mod _ _ }
	'weaker than'  { TokenPosn Lesser _ _ }
	'stronger than'{ TokenPosn Greater _ _ }
	'as weak as'   { TokenPosn LesserEq _ _ }
	'as strong as' { TokenPosn GreaterEq _ _ }
	'same as'      { TokenPosn Eq _ _ }
	'different of' { TokenPosn Neq _ _ }
	'both'         { TokenPosn And _ _ }
	'either'       { TokenPosn Or _ _ }
	'yep'          { TokenPosn Truthy _ _ }
	'pasyep'       { TokenPosn Falsy _ _ }
	'identifier'   { TokenPosn (Name $$) _ _ }
	'integer'      { TokenPosn (Integer $$) _ _ }
	'Integer'      { TokenPosn (Type "Integer") _ _ }
	'Boolean'      { TokenPosn (Type "Boolean") _ _ }
	'suppose'      { TokenPosn Suppose _ _ }
	'then we can conclude'{ TokenPosn ThenWeCanConclude _ _ }
	'rather than'  { TokenPosn RatherThan _ _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parser   rule  0
	Statement       rules 1, 2
	Expr            rules 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25
	Definition      rules 26, 27
	FunctionDef     rule  28
	FArgs           rules 29, 30
	Args            rules 31, 32
	Arg             rules 33, 34
	Type            rules 35, 36, 37
	TypeTuple       rule  38
	FunctionApp     rules 39, 40
	FunctionAppArgs rules 41, 42
	FunctionAppArg  rule  43
	LetInDefs       rules 44, 45
	If              rule  46
	CaseOfs         rules 47, 48
	CaseOf          rule  49
	Pattern         rules 50, 51, 52, 53
	Literal         rules 54, 55, 56, 57

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parser -> . Statement                        (rule 0)

	'behold'       shift, and enter state 4
	'summon'       shift, and enter state 11
	'this'         shift, and enter state 5
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Statement      goto state 6
	Expr           goto state 7
	Definition     goto state 2
	FunctionDef    goto state 3
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 1

	Statement -> . Definition                           (rule 1)

	'behold'       shift, and enter state 4
	'this'         shift, and enter state 5

	Definition     goto state 2
	FunctionDef    goto state 3

State 2

	Statement -> Definition .                           (rule 1)

	%eof           reduce using rule 1


State 3

	Definition -> FunctionDef .                         (rule 26)

	'and'          reduce using rule 26
	'into'         reduce using rule 26
	%eof           reduce using rule 26


State 4

	FunctionDef -> 'behold' . 'identifier' FArgs 'which does' Expr    (rule 28)

	'identifier'   shift, and enter state 45


State 5

	Definition -> 'this' . 'identifier' 'is' Expr       (rule 27)

	'identifier'   shift, and enter state 44


State 6

	%start_parser -> Statement .                        (rule 0)

	%eof           accept


State 7

	Statement -> Expr .                                 (rule 2)
	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  shift, and enter state 36
	'stronger than'shift, and enter state 37
	'as weak as'   shift, and enter state 38
	'as strong as' shift, and enter state 39
	'same as'      shift, and enter state 40
	'different of' shift, and enter state 41
	'both'         shift, and enter state 42
	'either'       shift, and enter state 43
	%eof           reduce using rule 2


State 8

	Expr -> FunctionApp .                               (rule 23)

	'and'          reduce using rule 23
	')'            reduce using rule 23
	'and his friend'reduce using rule 23
	'into'         reduce using rule 23
	'?'            reduce using rule 23
	'perhaps'      reduce using rule 23
	'plus'         reduce using rule 23
	'minus'        reduce using rule 23
	'times'        reduce using rule 23
	'split'        reduce using rule 23
	'rest'         reduce using rule 23
	'weaker than'  reduce using rule 23
	'stronger than'reduce using rule 23
	'as weak as'   reduce using rule 23
	'as strong as' reduce using rule 23
	'same as'      reduce using rule 23
	'different of' reduce using rule 23
	'both'         reduce using rule 23
	'either'       reduce using rule 23
	'then we can conclude'reduce using rule 23
	'rather than'  reduce using rule 23
	%eof           reduce using rule 23


State 9

	Expr -> If .                                        (rule 24)

	'and'          reduce using rule 24
	')'            reduce using rule 24
	'and his friend'reduce using rule 24
	'into'         reduce using rule 24
	'?'            reduce using rule 24
	'perhaps'      reduce using rule 24
	'plus'         reduce using rule 24
	'minus'        reduce using rule 24
	'times'        reduce using rule 24
	'split'        reduce using rule 24
	'rest'         reduce using rule 24
	'weaker than'  reduce using rule 24
	'stronger than'reduce using rule 24
	'as weak as'   reduce using rule 24
	'as strong as' reduce using rule 24
	'same as'      reduce using rule 24
	'different of' reduce using rule 24
	'both'         reduce using rule 24
	'either'       reduce using rule 24
	'then we can conclude'reduce using rule 24
	'rather than'  reduce using rule 24
	%eof           reduce using rule 24


State 10

	Expr -> Literal .                                   (rule 21)

	'and'          reduce using rule 21
	')'            reduce using rule 21
	'and his friend'reduce using rule 21
	'into'         reduce using rule 21
	'?'            reduce using rule 21
	'perhaps'      reduce using rule 21
	'plus'         reduce using rule 21
	'minus'        reduce using rule 21
	'times'        reduce using rule 21
	'split'        reduce using rule 21
	'rest'         reduce using rule 21
	'weaker than'  reduce using rule 21
	'stronger than'reduce using rule 21
	'as weak as'   reduce using rule 21
	'as strong as' reduce using rule 21
	'same as'      reduce using rule 21
	'different of' reduce using rule 21
	'both'         reduce using rule 21
	'either'       reduce using rule 21
	'then we can conclude'reduce using rule 21
	'rather than'  reduce using rule 21
	%eof           reduce using rule 21


State 11

	FunctionApp -> 'summon' . 'identifier' 'with' FunctionAppArgs    (rule 39)
	FunctionApp -> 'summon' . 'identifier'              (rule 40)

	'identifier'   shift, and enter state 30


State 12

	Expr -> '(' . Expr ')'                              (rule 25)
	Literal -> '(' . Expr 'and his friend' Expr ')'     (rule 57)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 29
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 13

	Expr -> 'put that' . LetInDefs 'into' Expr          (rule 3)
	Expr -> 'put that' . 'into' Expr                    (rule 4)

	'behold'       shift, and enter state 4
	'this'         shift, and enter state 5
	'into'         shift, and enter state 28

	Definition     goto state 26
	FunctionDef    goto state 3
	LetInDefs      goto state 27

State 14

	Expr -> 'what is' . Expr '?' CaseOfs                (rule 5)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 25
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 15

	Expr -> 'neg' . Expr                                (rule 6)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 24
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 16

	Expr -> 'not' . Expr                                (rule 7)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 23
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 17

	Literal -> 'yep' .                                  (rule 55)

	'and'          reduce using rule 55
	')'            reduce using rule 55
	'and his friend'reduce using rule 55
	'into'         reduce using rule 55
	'?'            reduce using rule 55
	'perhaps'      reduce using rule 55
	'which does'   reduce using rule 55
	'plus'         reduce using rule 55
	'minus'        reduce using rule 55
	'times'        reduce using rule 55
	'split'        reduce using rule 55
	'rest'         reduce using rule 55
	'weaker than'  reduce using rule 55
	'stronger than'reduce using rule 55
	'as weak as'   reduce using rule 55
	'as strong as' reduce using rule 55
	'same as'      reduce using rule 55
	'different of' reduce using rule 55
	'both'         reduce using rule 55
	'either'       reduce using rule 55
	'then we can conclude'reduce using rule 55
	'rather than'  reduce using rule 55
	%eof           reduce using rule 55


State 18

	Literal -> 'pasyep' .                               (rule 56)

	'and'          reduce using rule 56
	')'            reduce using rule 56
	'and his friend'reduce using rule 56
	'into'         reduce using rule 56
	'?'            reduce using rule 56
	'perhaps'      reduce using rule 56
	'which does'   reduce using rule 56
	'plus'         reduce using rule 56
	'minus'        reduce using rule 56
	'times'        reduce using rule 56
	'split'        reduce using rule 56
	'rest'         reduce using rule 56
	'weaker than'  reduce using rule 56
	'stronger than'reduce using rule 56
	'as weak as'   reduce using rule 56
	'as strong as' reduce using rule 56
	'same as'      reduce using rule 56
	'different of' reduce using rule 56
	'both'         reduce using rule 56
	'either'       reduce using rule 56
	'then we can conclude'reduce using rule 56
	'rather than'  reduce using rule 56
	%eof           reduce using rule 56


State 19

	Expr -> 'identifier' .                              (rule 22)

	'and'          reduce using rule 22
	')'            reduce using rule 22
	'and his friend'reduce using rule 22
	'into'         reduce using rule 22
	'?'            reduce using rule 22
	'perhaps'      reduce using rule 22
	'plus'         reduce using rule 22
	'minus'        reduce using rule 22
	'times'        reduce using rule 22
	'split'        reduce using rule 22
	'rest'         reduce using rule 22
	'weaker than'  reduce using rule 22
	'stronger than'reduce using rule 22
	'as weak as'   reduce using rule 22
	'as strong as' reduce using rule 22
	'same as'      reduce using rule 22
	'different of' reduce using rule 22
	'both'         reduce using rule 22
	'either'       reduce using rule 22
	'then we can conclude'reduce using rule 22
	'rather than'  reduce using rule 22
	%eof           reduce using rule 22


State 20

	Literal -> 'integer' .                              (rule 54)

	'and'          reduce using rule 54
	')'            reduce using rule 54
	'and his friend'reduce using rule 54
	'into'         reduce using rule 54
	'?'            reduce using rule 54
	'perhaps'      reduce using rule 54
	'which does'   reduce using rule 54
	'plus'         reduce using rule 54
	'minus'        reduce using rule 54
	'times'        reduce using rule 54
	'split'        reduce using rule 54
	'rest'         reduce using rule 54
	'weaker than'  reduce using rule 54
	'stronger than'reduce using rule 54
	'as weak as'   reduce using rule 54
	'as strong as' reduce using rule 54
	'same as'      reduce using rule 54
	'different of' reduce using rule 54
	'both'         reduce using rule 54
	'either'       reduce using rule 54
	'then we can conclude'reduce using rule 54
	'rather than'  reduce using rule 54
	%eof           reduce using rule 54


State 21

	If -> 'suppose' . Expr 'then we can conclude' Expr 'rather than' Expr    (rule 46)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 22
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 22

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)
	If -> 'suppose' Expr . 'then we can conclude' Expr 'rather than' Expr    (rule 46)

	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  shift, and enter state 36
	'stronger than'shift, and enter state 37
	'as weak as'   shift, and enter state 38
	'as strong as' shift, and enter state 39
	'same as'      shift, and enter state 40
	'different of' shift, and enter state 41
	'both'         shift, and enter state 42
	'either'       shift, and enter state 43
	'then we can conclude'shift, and enter state 69


State 23

	Expr -> 'not' Expr .                                (rule 7)
	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 7
	')'            reduce using rule 7
	'and his friend'reduce using rule 7
	'into'         reduce using rule 7
	'?'            reduce using rule 7
	'perhaps'      reduce using rule 7
	'plus'         reduce using rule 7
	'minus'        reduce using rule 7
	'times'        reduce using rule 7
	'split'        reduce using rule 7
	'rest'         reduce using rule 7
	'weaker than'  reduce using rule 7
	'stronger than'reduce using rule 7
	'as weak as'   reduce using rule 7
	'as strong as' reduce using rule 7
	'same as'      reduce using rule 7
	'different of' reduce using rule 7
	'both'         reduce using rule 7
	'either'       reduce using rule 7
	'then we can conclude'reduce using rule 7
	'rather than'  reduce using rule 7
	%eof           reduce using rule 7


State 24

	Expr -> 'neg' Expr .                                (rule 6)
	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 6
	')'            reduce using rule 6
	'and his friend'reduce using rule 6
	'into'         reduce using rule 6
	'?'            reduce using rule 6
	'perhaps'      reduce using rule 6
	'plus'         reduce using rule 6
	'minus'        reduce using rule 6
	'times'        reduce using rule 6
	'split'        reduce using rule 6
	'rest'         reduce using rule 6
	'weaker than'  reduce using rule 6
	'stronger than'reduce using rule 6
	'as weak as'   reduce using rule 6
	'as strong as' reduce using rule 6
	'same as'      reduce using rule 6
	'different of' reduce using rule 6
	'both'         reduce using rule 6
	'either'       reduce using rule 6
	'then we can conclude'reduce using rule 6
	'rather than'  reduce using rule 6
	%eof           reduce using rule 6


State 25

	Expr -> 'what is' Expr . '?' CaseOfs                (rule 5)
	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'?'            shift, and enter state 68
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  shift, and enter state 36
	'stronger than'shift, and enter state 37
	'as weak as'   shift, and enter state 38
	'as strong as' shift, and enter state 39
	'same as'      shift, and enter state 40
	'different of' shift, and enter state 41
	'both'         shift, and enter state 42
	'either'       shift, and enter state 43


State 26

	LetInDefs -> Definition .                           (rule 44)

	'and'          reduce using rule 44
	'into'         reduce using rule 44


State 27

	Expr -> 'put that' LetInDefs . 'into' Expr          (rule 3)
	LetInDefs -> LetInDefs . 'and' Definition           (rule 45)

	'and'          shift, and enter state 66
	'into'         shift, and enter state 67


State 28

	Expr -> 'put that' 'into' . Expr                    (rule 4)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 65
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 29

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)
	Expr -> '(' Expr . ')'                              (rule 25)
	Literal -> '(' Expr . 'and his friend' Expr ')'     (rule 57)

	')'            shift, and enter state 63
	'and his friend'shift, and enter state 64
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  shift, and enter state 36
	'stronger than'shift, and enter state 37
	'as weak as'   shift, and enter state 38
	'as strong as' shift, and enter state 39
	'same as'      shift, and enter state 40
	'different of' shift, and enter state 41
	'both'         shift, and enter state 42
	'either'       shift, and enter state 43


State 30

	FunctionApp -> 'summon' 'identifier' . 'with' FunctionAppArgs    (rule 39)
	FunctionApp -> 'summon' 'identifier' .              (rule 40)

	'with'         shift, and enter state 62
	'and'          reduce using rule 40
	')'            reduce using rule 40
	'and his friend'reduce using rule 40
	'into'         reduce using rule 40
	'?'            reduce using rule 40
	'perhaps'      reduce using rule 40
	'plus'         reduce using rule 40
	'minus'        reduce using rule 40
	'times'        reduce using rule 40
	'split'        reduce using rule 40
	'rest'         reduce using rule 40
	'weaker than'  reduce using rule 40
	'stronger than'reduce using rule 40
	'as weak as'   reduce using rule 40
	'as strong as' reduce using rule 40
	'same as'      reduce using rule 40
	'different of' reduce using rule 40
	'both'         reduce using rule 40
	'either'       reduce using rule 40
	'then we can conclude'reduce using rule 40
	'rather than'  reduce using rule 40
	%eof           reduce using rule 40


State 31

	Expr -> Expr 'plus' . Expr                          (rule 11)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 61
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 32

	Expr -> Expr 'minus' . Expr                         (rule 12)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 60
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 33

	Expr -> Expr 'times' . Expr                         (rule 8)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 59
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 34

	Expr -> Expr 'split' . Expr                         (rule 9)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 58
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 35

	Expr -> Expr 'rest' . Expr                          (rule 10)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 57
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 36

	Expr -> Expr 'weaker than' . Expr                   (rule 13)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 56
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 37

	Expr -> Expr 'stronger than' . Expr                 (rule 14)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 55
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 38

	Expr -> Expr 'as weak as' . Expr                    (rule 15)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 54
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 39

	Expr -> Expr 'as strong as' . Expr                  (rule 16)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 53
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 40

	Expr -> Expr 'same as' . Expr                       (rule 17)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 52
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 41

	Expr -> Expr 'different of' . Expr                  (rule 18)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 51
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 42

	Expr -> Expr 'both' . Expr                          (rule 19)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 50
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 43

	Expr -> Expr 'either' . Expr                        (rule 20)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 49
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 44

	Definition -> 'this' 'identifier' . 'is' Expr       (rule 27)

	'is'           shift, and enter state 48


State 45

	FunctionDef -> 'behold' 'identifier' . FArgs 'which does' Expr    (rule 28)

	'with'         shift, and enter state 47
	'which does'   reduce using rule 29

	FArgs          goto state 46

State 46

	FunctionDef -> 'behold' 'identifier' FArgs . 'which does' Expr    (rule 28)

	'which does'   shift, and enter state 89


State 47

	FArgs -> 'with' . Args                              (rule 30)

	'('            shift, and enter state 85
	'identifier'   shift, and enter state 86
	'Integer'      shift, and enter state 87
	'Boolean'      shift, and enter state 88

	Args           goto state 81
	Arg            goto state 82
	Type           goto state 83
	TypeTuple      goto state 84

State 48

	Definition -> 'this' 'identifier' 'is' . Expr       (rule 27)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 80
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 49

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)
	Expr -> Expr 'either' Expr .                        (rule 20)

	'and'          reduce using rule 20
	')'            reduce using rule 20
	'and his friend'reduce using rule 20
	'into'         reduce using rule 20
	'?'            reduce using rule 20
	'perhaps'      reduce using rule 20
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  shift, and enter state 36
	'stronger than'shift, and enter state 37
	'as weak as'   shift, and enter state 38
	'as strong as' shift, and enter state 39
	'same as'      shift, and enter state 40
	'different of' shift, and enter state 41
	'both'         shift, and enter state 42
	'either'       shift, and enter state 43
	'then we can conclude'reduce using rule 20
	'rather than'  reduce using rule 20
	%eof           reduce using rule 20


State 50

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr 'both' Expr .                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 19
	')'            reduce using rule 19
	'and his friend'reduce using rule 19
	'into'         reduce using rule 19
	'?'            reduce using rule 19
	'perhaps'      reduce using rule 19
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  shift, and enter state 36
	'stronger than'shift, and enter state 37
	'as weak as'   shift, and enter state 38
	'as strong as' shift, and enter state 39
	'same as'      shift, and enter state 40
	'different of' shift, and enter state 41
	'both'         shift, and enter state 42
	'either'       reduce using rule 19
	'then we can conclude'reduce using rule 19
	'rather than'  reduce using rule 19
	%eof           reduce using rule 19


State 51

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr 'different of' Expr .                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 18
	')'            reduce using rule 18
	'and his friend'reduce using rule 18
	'into'         reduce using rule 18
	'?'            reduce using rule 18
	'perhaps'      reduce using rule 18
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  fail
	'stronger than'fail
	'as weak as'   fail
	'as strong as' fail
	'same as'      fail
	'different of' fail
	'both'         reduce using rule 18
	'either'       reduce using rule 18
	'then we can conclude'reduce using rule 18
	'rather than'  reduce using rule 18
	%eof           reduce using rule 18


State 52

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr 'same as' Expr .                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 17
	')'            reduce using rule 17
	'and his friend'reduce using rule 17
	'into'         reduce using rule 17
	'?'            reduce using rule 17
	'perhaps'      reduce using rule 17
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  fail
	'stronger than'fail
	'as weak as'   fail
	'as strong as' fail
	'same as'      fail
	'different of' fail
	'both'         reduce using rule 17
	'either'       reduce using rule 17
	'then we can conclude'reduce using rule 17
	'rather than'  reduce using rule 17
	%eof           reduce using rule 17


State 53

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr 'as strong as' Expr .                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 16
	')'            reduce using rule 16
	'and his friend'reduce using rule 16
	'into'         reduce using rule 16
	'?'            reduce using rule 16
	'perhaps'      reduce using rule 16
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  fail
	'stronger than'fail
	'as weak as'   fail
	'as strong as' fail
	'same as'      fail
	'different of' fail
	'both'         reduce using rule 16
	'either'       reduce using rule 16
	'then we can conclude'reduce using rule 16
	'rather than'  reduce using rule 16
	%eof           reduce using rule 16


State 54

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr 'as weak as' Expr .                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 15
	')'            reduce using rule 15
	'and his friend'reduce using rule 15
	'into'         reduce using rule 15
	'?'            reduce using rule 15
	'perhaps'      reduce using rule 15
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  fail
	'stronger than'fail
	'as weak as'   fail
	'as strong as' fail
	'same as'      fail
	'different of' fail
	'both'         reduce using rule 15
	'either'       reduce using rule 15
	'then we can conclude'reduce using rule 15
	'rather than'  reduce using rule 15
	%eof           reduce using rule 15


State 55

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr 'stronger than' Expr .                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 14
	')'            reduce using rule 14
	'and his friend'reduce using rule 14
	'into'         reduce using rule 14
	'?'            reduce using rule 14
	'perhaps'      reduce using rule 14
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  fail
	'stronger than'fail
	'as weak as'   fail
	'as strong as' fail
	'same as'      fail
	'different of' fail
	'both'         reduce using rule 14
	'either'       reduce using rule 14
	'then we can conclude'reduce using rule 14
	'rather than'  reduce using rule 14
	%eof           reduce using rule 14


State 56

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr 'weaker than' Expr .                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 13
	')'            reduce using rule 13
	'and his friend'reduce using rule 13
	'into'         reduce using rule 13
	'?'            reduce using rule 13
	'perhaps'      reduce using rule 13
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  fail
	'stronger than'fail
	'as weak as'   fail
	'as strong as' fail
	'same as'      fail
	'different of' fail
	'both'         reduce using rule 13
	'either'       reduce using rule 13
	'then we can conclude'reduce using rule 13
	'rather than'  reduce using rule 13
	%eof           reduce using rule 13


State 57

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr 'rest' Expr .                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 10
	')'            reduce using rule 10
	'and his friend'reduce using rule 10
	'into'         reduce using rule 10
	'?'            reduce using rule 10
	'perhaps'      reduce using rule 10
	'plus'         reduce using rule 10
	'minus'        reduce using rule 10
	'times'        reduce using rule 10
	'split'        reduce using rule 10
	'rest'         reduce using rule 10
	'weaker than'  reduce using rule 10
	'stronger than'reduce using rule 10
	'as weak as'   reduce using rule 10
	'as strong as' reduce using rule 10
	'same as'      reduce using rule 10
	'different of' reduce using rule 10
	'both'         reduce using rule 10
	'either'       reduce using rule 10
	'then we can conclude'reduce using rule 10
	'rather than'  reduce using rule 10
	%eof           reduce using rule 10


State 58

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr 'split' Expr .                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 9
	')'            reduce using rule 9
	'and his friend'reduce using rule 9
	'into'         reduce using rule 9
	'?'            reduce using rule 9
	'perhaps'      reduce using rule 9
	'plus'         reduce using rule 9
	'minus'        reduce using rule 9
	'times'        reduce using rule 9
	'split'        reduce using rule 9
	'rest'         reduce using rule 9
	'weaker than'  reduce using rule 9
	'stronger than'reduce using rule 9
	'as weak as'   reduce using rule 9
	'as strong as' reduce using rule 9
	'same as'      reduce using rule 9
	'different of' reduce using rule 9
	'both'         reduce using rule 9
	'either'       reduce using rule 9
	'then we can conclude'reduce using rule 9
	'rather than'  reduce using rule 9
	%eof           reduce using rule 9


State 59

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr 'times' Expr .                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 8
	')'            reduce using rule 8
	'and his friend'reduce using rule 8
	'into'         reduce using rule 8
	'?'            reduce using rule 8
	'perhaps'      reduce using rule 8
	'plus'         reduce using rule 8
	'minus'        reduce using rule 8
	'times'        reduce using rule 8
	'split'        reduce using rule 8
	'rest'         reduce using rule 8
	'weaker than'  reduce using rule 8
	'stronger than'reduce using rule 8
	'as weak as'   reduce using rule 8
	'as strong as' reduce using rule 8
	'same as'      reduce using rule 8
	'different of' reduce using rule 8
	'both'         reduce using rule 8
	'either'       reduce using rule 8
	'then we can conclude'reduce using rule 8
	'rather than'  reduce using rule 8
	%eof           reduce using rule 8


State 60

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr 'minus' Expr .                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 12
	')'            reduce using rule 12
	'and his friend'reduce using rule 12
	'into'         reduce using rule 12
	'?'            reduce using rule 12
	'perhaps'      reduce using rule 12
	'plus'         reduce using rule 12
	'minus'        reduce using rule 12
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  reduce using rule 12
	'stronger than'reduce using rule 12
	'as weak as'   reduce using rule 12
	'as strong as' reduce using rule 12
	'same as'      reduce using rule 12
	'different of' reduce using rule 12
	'both'         reduce using rule 12
	'either'       reduce using rule 12
	'then we can conclude'reduce using rule 12
	'rather than'  reduce using rule 12
	%eof           reduce using rule 12


State 61

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr 'plus' Expr .                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 11
	')'            reduce using rule 11
	'and his friend'reduce using rule 11
	'into'         reduce using rule 11
	'?'            reduce using rule 11
	'perhaps'      reduce using rule 11
	'plus'         reduce using rule 11
	'minus'        reduce using rule 11
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  reduce using rule 11
	'stronger than'reduce using rule 11
	'as weak as'   reduce using rule 11
	'as strong as' reduce using rule 11
	'same as'      reduce using rule 11
	'different of' reduce using rule 11
	'both'         reduce using rule 11
	'either'       reduce using rule 11
	'then we can conclude'reduce using rule 11
	'rather than'  reduce using rule 11
	%eof           reduce using rule 11


State 62

	FunctionApp -> 'summon' 'identifier' 'with' . FunctionAppArgs    (rule 39)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 77
	FunctionApp    goto state 8
	FunctionAppArgsgoto state 78
	FunctionAppArg goto state 79
	If             goto state 9
	Literal        goto state 10

State 63

	Expr -> '(' Expr ')' .                              (rule 25)

	'and'          reduce using rule 25
	')'            reduce using rule 25
	'and his friend'reduce using rule 25
	'into'         reduce using rule 25
	'?'            reduce using rule 25
	'perhaps'      reduce using rule 25
	'plus'         reduce using rule 25
	'minus'        reduce using rule 25
	'times'        reduce using rule 25
	'split'        reduce using rule 25
	'rest'         reduce using rule 25
	'weaker than'  reduce using rule 25
	'stronger than'reduce using rule 25
	'as weak as'   reduce using rule 25
	'as strong as' reduce using rule 25
	'same as'      reduce using rule 25
	'different of' reduce using rule 25
	'both'         reduce using rule 25
	'either'       reduce using rule 25
	'then we can conclude'reduce using rule 25
	'rather than'  reduce using rule 25
	%eof           reduce using rule 25


State 64

	Literal -> '(' Expr 'and his friend' . Expr ')'     (rule 57)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 76
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 65

	Expr -> 'put that' 'into' Expr .                    (rule 4)
	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 4
	')'            reduce using rule 4
	'and his friend'reduce using rule 4
	'into'         reduce using rule 4
	'?'            reduce using rule 4
	'perhaps'      reduce using rule 4
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  shift, and enter state 36
	'stronger than'shift, and enter state 37
	'as weak as'   shift, and enter state 38
	'as strong as' shift, and enter state 39
	'same as'      shift, and enter state 40
	'different of' shift, and enter state 41
	'both'         shift, and enter state 42
	'either'       shift, and enter state 43
	'then we can conclude'reduce using rule 4
	'rather than'  reduce using rule 4
	%eof           reduce using rule 4


State 66

	LetInDefs -> LetInDefs 'and' . Definition           (rule 45)

	'behold'       shift, and enter state 4
	'this'         shift, and enter state 5

	Definition     goto state 75
	FunctionDef    goto state 3

State 67

	Expr -> 'put that' LetInDefs 'into' . Expr          (rule 3)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 74
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 68

	Expr -> 'what is' Expr '?' . CaseOfs                (rule 5)

	'perhaps'      shift, and enter state 73

	CaseOfs        goto state 71
	CaseOf         goto state 72

State 69

	If -> 'suppose' Expr 'then we can conclude' . Expr 'rather than' Expr    (rule 46)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 70
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 70

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)
	If -> 'suppose' Expr 'then we can conclude' Expr . 'rather than' Expr    (rule 46)

	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  shift, and enter state 36
	'stronger than'shift, and enter state 37
	'as weak as'   shift, and enter state 38
	'as strong as' shift, and enter state 39
	'same as'      shift, and enter state 40
	'different of' shift, and enter state 41
	'both'         shift, and enter state 42
	'either'       shift, and enter state 43
	'rather than'  shift, and enter state 103


State 71

	Expr -> 'what is' Expr '?' CaseOfs .                (rule 5)

	'and'          reduce using rule 5
	')'            reduce using rule 5
	'and his friend'reduce using rule 5
	'into'         reduce using rule 5
	'?'            reduce using rule 5
	'perhaps'      reduce using rule 5
	'plus'         reduce using rule 5
	'minus'        reduce using rule 5
	'times'        reduce using rule 5
	'split'        reduce using rule 5
	'rest'         reduce using rule 5
	'weaker than'  reduce using rule 5
	'stronger than'reduce using rule 5
	'as weak as'   reduce using rule 5
	'as strong as' reduce using rule 5
	'same as'      reduce using rule 5
	'different of' reduce using rule 5
	'both'         reduce using rule 5
	'either'       reduce using rule 5
	'then we can conclude'reduce using rule 5
	'rather than'  reduce using rule 5
	%eof           reduce using rule 5


State 72

	CaseOfs -> CaseOf .                                 (rule 47)
	CaseOfs -> CaseOf . CaseOfs                         (rule 48)

	'and'          reduce using rule 47
	')'            reduce using rule 47
	'and his friend'reduce using rule 47
	'into'         reduce using rule 47
	'?'            reduce using rule 47
	'perhaps'      shift, and enter state 73
			(reduce using rule 47)

	'plus'         reduce using rule 47
	'minus'        reduce using rule 47
	'times'        reduce using rule 47
	'split'        reduce using rule 47
	'rest'         reduce using rule 47
	'weaker than'  reduce using rule 47
	'stronger than'reduce using rule 47
	'as weak as'   reduce using rule 47
	'as strong as' reduce using rule 47
	'same as'      reduce using rule 47
	'different of' reduce using rule 47
	'both'         reduce using rule 47
	'either'       reduce using rule 47
	'then we can conclude'reduce using rule 47
	'rather than'  reduce using rule 47
	%eof           reduce using rule 47

	CaseOfs        goto state 102
	CaseOf         goto state 72

State 73

	CaseOf -> 'perhaps' . Pattern 'which does' Expr     (rule 49)

	'('            shift, and enter state 99
	'who cares'    shift, and enter state 100
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 101
	'integer'      shift, and enter state 20

	Pattern        goto state 97
	Literal        goto state 98

State 74

	Expr -> 'put that' LetInDefs 'into' Expr .          (rule 3)
	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)

	'and'          reduce using rule 3
	')'            reduce using rule 3
	'and his friend'reduce using rule 3
	'into'         reduce using rule 3
	'?'            reduce using rule 3
	'perhaps'      reduce using rule 3
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  shift, and enter state 36
	'stronger than'shift, and enter state 37
	'as weak as'   shift, and enter state 38
	'as strong as' shift, and enter state 39
	'same as'      shift, and enter state 40
	'different of' shift, and enter state 41
	'both'         shift, and enter state 42
	'either'       shift, and enter state 43
	'then we can conclude'reduce using rule 3
	'rather than'  reduce using rule 3
	%eof           reduce using rule 3


State 75

	LetInDefs -> LetInDefs 'and' Definition .           (rule 45)

	'and'          reduce using rule 45
	'into'         reduce using rule 45


State 76

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)
	Literal -> '(' Expr 'and his friend' Expr . ')'     (rule 57)

	')'            shift, and enter state 96
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  shift, and enter state 36
	'stronger than'shift, and enter state 37
	'as weak as'   shift, and enter state 38
	'as strong as' shift, and enter state 39
	'same as'      shift, and enter state 40
	'different of' shift, and enter state 41
	'both'         shift, and enter state 42
	'either'       shift, and enter state 43


State 77

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)
	FunctionAppArg -> Expr .                            (rule 43)

	'and'          reduce using rule 43
	')'            reduce using rule 43
	'and his friend'reduce using rule 43
	'into'         reduce using rule 43
	'?'            reduce using rule 43
	'perhaps'      reduce using rule 43
	'plus'         shift, and enter state 31
			(reduce using rule 43)

	'minus'        shift, and enter state 32
			(reduce using rule 43)

	'times'        shift, and enter state 33
			(reduce using rule 43)

	'split'        shift, and enter state 34
			(reduce using rule 43)

	'rest'         shift, and enter state 35
			(reduce using rule 43)

	'weaker than'  shift, and enter state 36
			(reduce using rule 43)

	'stronger than'shift, and enter state 37
			(reduce using rule 43)

	'as weak as'   shift, and enter state 38
			(reduce using rule 43)

	'as strong as' shift, and enter state 39
			(reduce using rule 43)

	'same as'      shift, and enter state 40
			(reduce using rule 43)

	'different of' shift, and enter state 41
			(reduce using rule 43)

	'both'         shift, and enter state 42
			(reduce using rule 43)

	'either'       shift, and enter state 43
			(reduce using rule 43)

	'then we can conclude'reduce using rule 43
	'rather than'  reduce using rule 43
	%eof           reduce using rule 43


State 78

	FunctionApp -> 'summon' 'identifier' 'with' FunctionAppArgs .    (rule 39)
	FunctionAppArgs -> FunctionAppArgs . 'and' FunctionAppArg    (rule 42)

	'and'          shift, and enter state 95
			(reduce using rule 39)

	')'            reduce using rule 39
	'and his friend'reduce using rule 39
	'into'         reduce using rule 39
	'?'            reduce using rule 39
	'perhaps'      reduce using rule 39
	'plus'         reduce using rule 39
	'minus'        reduce using rule 39
	'times'        reduce using rule 39
	'split'        reduce using rule 39
	'rest'         reduce using rule 39
	'weaker than'  reduce using rule 39
	'stronger than'reduce using rule 39
	'as weak as'   reduce using rule 39
	'as strong as' reduce using rule 39
	'same as'      reduce using rule 39
	'different of' reduce using rule 39
	'both'         reduce using rule 39
	'either'       reduce using rule 39
	'then we can conclude'reduce using rule 39
	'rather than'  reduce using rule 39
	%eof           reduce using rule 39


State 79

	FunctionAppArgs -> FunctionAppArg .                 (rule 41)

	'and'          reduce using rule 41
	')'            reduce using rule 41
	'and his friend'reduce using rule 41
	'into'         reduce using rule 41
	'?'            reduce using rule 41
	'perhaps'      reduce using rule 41
	'plus'         reduce using rule 41
	'minus'        reduce using rule 41
	'times'        reduce using rule 41
	'split'        reduce using rule 41
	'rest'         reduce using rule 41
	'weaker than'  reduce using rule 41
	'stronger than'reduce using rule 41
	'as weak as'   reduce using rule 41
	'as strong as' reduce using rule 41
	'same as'      reduce using rule 41
	'different of' reduce using rule 41
	'both'         reduce using rule 41
	'either'       reduce using rule 41
	'then we can conclude'reduce using rule 41
	'rather than'  reduce using rule 41
	%eof           reduce using rule 41


State 80

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)
	Definition -> 'this' 'identifier' 'is' Expr .       (rule 27)

	'and'          reduce using rule 27
	'into'         reduce using rule 27
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  shift, and enter state 36
	'stronger than'shift, and enter state 37
	'as weak as'   shift, and enter state 38
	'as strong as' shift, and enter state 39
	'same as'      shift, and enter state 40
	'different of' shift, and enter state 41
	'both'         shift, and enter state 42
	'either'       shift, and enter state 43
	%eof           reduce using rule 27


State 81

	FArgs -> 'with' Args .                              (rule 30)
	Args -> Args . 'and' Arg                            (rule 32)

	'and'          shift, and enter state 94
	'which does'   reduce using rule 30


State 82

	Args -> Arg .                                       (rule 31)

	'and'          reduce using rule 31
	'which does'   reduce using rule 31


State 83

	Arg -> Type . 'identifier'                          (rule 33)

	'identifier'   shift, and enter state 93


State 84

	Type -> TypeTuple .                                 (rule 37)

	')'            reduce using rule 37
	'and his friend'reduce using rule 37
	'identifier'   reduce using rule 37


State 85

	TypeTuple -> '(' . Type 'and his friend' Type ')'    (rule 38)

	'('            shift, and enter state 85
	'Integer'      shift, and enter state 87
	'Boolean'      shift, and enter state 88

	Type           goto state 92
	TypeTuple      goto state 84

State 86

	Arg -> 'identifier' . '(' Arg 'and his friend' Arg ')'    (rule 34)

	'('            shift, and enter state 91


State 87

	Type -> 'Integer' .                                 (rule 35)

	')'            reduce using rule 35
	'and his friend'reduce using rule 35
	'identifier'   reduce using rule 35


State 88

	Type -> 'Boolean' .                                 (rule 36)

	')'            reduce using rule 36
	'and his friend'reduce using rule 36
	'identifier'   reduce using rule 36


State 89

	FunctionDef -> 'behold' 'identifier' FArgs 'which does' . Expr    (rule 28)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 90
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 90

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)
	FunctionDef -> 'behold' 'identifier' FArgs 'which does' Expr .    (rule 28)

	'and'          reduce using rule 28
	'into'         reduce using rule 28
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  shift, and enter state 36
	'stronger than'shift, and enter state 37
	'as weak as'   shift, and enter state 38
	'as strong as' shift, and enter state 39
	'same as'      shift, and enter state 40
	'different of' shift, and enter state 41
	'both'         shift, and enter state 42
	'either'       shift, and enter state 43
	%eof           reduce using rule 28


State 91

	Arg -> 'identifier' '(' . Arg 'and his friend' Arg ')'    (rule 34)

	'('            shift, and enter state 85
	'identifier'   shift, and enter state 86
	'Integer'      shift, and enter state 87
	'Boolean'      shift, and enter state 88

	Arg            goto state 114
	Type           goto state 83
	TypeTuple      goto state 84

State 92

	TypeTuple -> '(' Type . 'and his friend' Type ')'    (rule 38)

	'and his friend'shift, and enter state 113


State 93

	Arg -> Type 'identifier' .                          (rule 33)

	'and'          reduce using rule 33
	')'            reduce using rule 33
	'and his friend'reduce using rule 33
	'which does'   reduce using rule 33


State 94

	Args -> Args 'and' . Arg                            (rule 32)

	'('            shift, and enter state 85
	'identifier'   shift, and enter state 86
	'Integer'      shift, and enter state 87
	'Boolean'      shift, and enter state 88

	Arg            goto state 112
	Type           goto state 83
	TypeTuple      goto state 84

State 95

	FunctionAppArgs -> FunctionAppArgs 'and' . FunctionAppArg    (rule 42)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 77
	FunctionApp    goto state 8
	FunctionAppArg goto state 111
	If             goto state 9
	Literal        goto state 10

State 96

	Literal -> '(' Expr 'and his friend' Expr ')' .     (rule 57)

	'and'          reduce using rule 57
	')'            reduce using rule 57
	'and his friend'reduce using rule 57
	'into'         reduce using rule 57
	'?'            reduce using rule 57
	'perhaps'      reduce using rule 57
	'which does'   reduce using rule 57
	'plus'         reduce using rule 57
	'minus'        reduce using rule 57
	'times'        reduce using rule 57
	'split'        reduce using rule 57
	'rest'         reduce using rule 57
	'weaker than'  reduce using rule 57
	'stronger than'reduce using rule 57
	'as weak as'   reduce using rule 57
	'as strong as' reduce using rule 57
	'same as'      reduce using rule 57
	'different of' reduce using rule 57
	'both'         reduce using rule 57
	'either'       reduce using rule 57
	'then we can conclude'reduce using rule 57
	'rather than'  reduce using rule 57
	%eof           reduce using rule 57


State 97

	CaseOf -> 'perhaps' Pattern . 'which does' Expr     (rule 49)

	'which does'   shift, and enter state 110


State 98

	Pattern -> Literal .                                (rule 53)

	')'            reduce using rule 53
	'which does'   reduce using rule 53


State 99

	Pattern -> '(' . Pattern 'and his friend' Pattern ')'    (rule 52)
	Literal -> '(' . Expr 'and his friend' Expr ')'     (rule 57)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 108
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'who cares'    shift, and enter state 100
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 109
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 105
	FunctionApp    goto state 8
	If             goto state 9
	Pattern        goto state 106
	Literal        goto state 107

State 100

	Pattern -> 'who cares' .                            (rule 50)

	')'            reduce using rule 50
	'and his friend'reduce using rule 50
	'which does'   reduce using rule 50


State 101

	Pattern -> 'identifier' .                           (rule 51)

	')'            reduce using rule 51
	'which does'   reduce using rule 51


State 102

	CaseOfs -> CaseOf CaseOfs .                         (rule 48)

	'and'          reduce using rule 48
	')'            reduce using rule 48
	'and his friend'reduce using rule 48
	'into'         reduce using rule 48
	'?'            reduce using rule 48
	'perhaps'      reduce using rule 48
	'plus'         reduce using rule 48
	'minus'        reduce using rule 48
	'times'        reduce using rule 48
	'split'        reduce using rule 48
	'rest'         reduce using rule 48
	'weaker than'  reduce using rule 48
	'stronger than'reduce using rule 48
	'as weak as'   reduce using rule 48
	'as strong as' reduce using rule 48
	'same as'      reduce using rule 48
	'different of' reduce using rule 48
	'both'         reduce using rule 48
	'either'       reduce using rule 48
	'then we can conclude'reduce using rule 48
	'rather than'  reduce using rule 48
	%eof           reduce using rule 48


State 103

	If -> 'suppose' Expr 'then we can conclude' Expr 'rather than' . Expr    (rule 46)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 104
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 104

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)
	If -> 'suppose' Expr 'then we can conclude' Expr 'rather than' Expr .    (rule 46)

	'and'          reduce using rule 46
	')'            reduce using rule 46
	'and his friend'reduce using rule 46
	'into'         reduce using rule 46
	'?'            reduce using rule 46
	'perhaps'      reduce using rule 46
	'plus'         shift, and enter state 31
			(reduce using rule 46)

	'minus'        shift, and enter state 32
			(reduce using rule 46)

	'times'        shift, and enter state 33
			(reduce using rule 46)

	'split'        shift, and enter state 34
			(reduce using rule 46)

	'rest'         shift, and enter state 35
			(reduce using rule 46)

	'weaker than'  shift, and enter state 36
			(reduce using rule 46)

	'stronger than'shift, and enter state 37
			(reduce using rule 46)

	'as weak as'   shift, and enter state 38
			(reduce using rule 46)

	'as strong as' shift, and enter state 39
			(reduce using rule 46)

	'same as'      shift, and enter state 40
			(reduce using rule 46)

	'different of' shift, and enter state 41
			(reduce using rule 46)

	'both'         shift, and enter state 42
			(reduce using rule 46)

	'either'       shift, and enter state 43
			(reduce using rule 46)

	'then we can conclude'reduce using rule 46
	'rather than'  reduce using rule 46
	%eof           reduce using rule 46


State 105

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)
	Literal -> '(' Expr . 'and his friend' Expr ')'     (rule 57)

	'and his friend'shift, and enter state 64
	'plus'         shift, and enter state 31
	'minus'        shift, and enter state 32
	'times'        shift, and enter state 33
	'split'        shift, and enter state 34
	'rest'         shift, and enter state 35
	'weaker than'  shift, and enter state 36
	'stronger than'shift, and enter state 37
	'as weak as'   shift, and enter state 38
	'as strong as' shift, and enter state 39
	'same as'      shift, and enter state 40
	'different of' shift, and enter state 41
	'both'         shift, and enter state 42
	'either'       shift, and enter state 43


State 106

	Pattern -> '(' Pattern . 'and his friend' Pattern ')'    (rule 52)

	'and his friend'shift, and enter state 118


State 107

	Expr -> Literal .                                   (rule 21)
	Pattern -> Literal .                                (rule 53)

	')'            reduce using rule 21
	'and his friend'reduce using rule 53
			(reduce using rule 21)

	'plus'         reduce using rule 21
	'minus'        reduce using rule 21
	'times'        reduce using rule 21
	'split'        reduce using rule 21
	'rest'         reduce using rule 21
	'weaker than'  reduce using rule 21
	'stronger than'reduce using rule 21
	'as weak as'   reduce using rule 21
	'as strong as' reduce using rule 21
	'same as'      reduce using rule 21
	'different of' reduce using rule 21
	'both'         reduce using rule 21
	'either'       reduce using rule 21


State 108

	Expr -> '(' . Expr ')'                              (rule 25)
	Pattern -> '(' . Pattern 'and his friend' Pattern ')'    (rule 52)
	Literal -> '(' . Expr 'and his friend' Expr ')'     (rule 57)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 108
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'who cares'    shift, and enter state 100
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 109
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 29
	FunctionApp    goto state 8
	If             goto state 9
	Pattern        goto state 106
	Literal        goto state 107

State 109

	Expr -> 'identifier' .                              (rule 22)
	Pattern -> 'identifier' .                           (rule 51)

	')'            reduce using rule 22
	'and his friend'reduce using rule 51
			(reduce using rule 22)

	'plus'         reduce using rule 22
	'minus'        reduce using rule 22
	'times'        reduce using rule 22
	'split'        reduce using rule 22
	'rest'         reduce using rule 22
	'weaker than'  reduce using rule 22
	'stronger than'reduce using rule 22
	'as weak as'   reduce using rule 22
	'as strong as' reduce using rule 22
	'same as'      reduce using rule 22
	'different of' reduce using rule 22
	'both'         reduce using rule 22
	'either'       reduce using rule 22


State 110

	CaseOf -> 'perhaps' Pattern 'which does' . Expr     (rule 49)

	'summon'       shift, and enter state 11
	'('            shift, and enter state 12
	'put that'     shift, and enter state 13
	'what is'      shift, and enter state 14
	'neg'          shift, and enter state 15
	'not'          shift, and enter state 16
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 19
	'integer'      shift, and enter state 20
	'suppose'      shift, and enter state 21

	Expr           goto state 117
	FunctionApp    goto state 8
	If             goto state 9
	Literal        goto state 10

State 111

	FunctionAppArgs -> FunctionAppArgs 'and' FunctionAppArg .    (rule 42)

	'and'          reduce using rule 42
	')'            reduce using rule 42
	'and his friend'reduce using rule 42
	'into'         reduce using rule 42
	'?'            reduce using rule 42
	'perhaps'      reduce using rule 42
	'plus'         reduce using rule 42
	'minus'        reduce using rule 42
	'times'        reduce using rule 42
	'split'        reduce using rule 42
	'rest'         reduce using rule 42
	'weaker than'  reduce using rule 42
	'stronger than'reduce using rule 42
	'as weak as'   reduce using rule 42
	'as strong as' reduce using rule 42
	'same as'      reduce using rule 42
	'different of' reduce using rule 42
	'both'         reduce using rule 42
	'either'       reduce using rule 42
	'then we can conclude'reduce using rule 42
	'rather than'  reduce using rule 42
	%eof           reduce using rule 42


State 112

	Args -> Args 'and' Arg .                            (rule 32)

	'and'          reduce using rule 32
	'which does'   reduce using rule 32


State 113

	TypeTuple -> '(' Type 'and his friend' . Type ')'    (rule 38)

	'('            shift, and enter state 85
	'Integer'      shift, and enter state 87
	'Boolean'      shift, and enter state 88

	Type           goto state 116
	TypeTuple      goto state 84

State 114

	Arg -> 'identifier' '(' Arg . 'and his friend' Arg ')'    (rule 34)

	'and his friend'shift, and enter state 115


State 115

	Arg -> 'identifier' '(' Arg 'and his friend' . Arg ')'    (rule 34)

	'('            shift, and enter state 85
	'identifier'   shift, and enter state 86
	'Integer'      shift, and enter state 87
	'Boolean'      shift, and enter state 88

	Arg            goto state 121
	Type           goto state 83
	TypeTuple      goto state 84

State 116

	TypeTuple -> '(' Type 'and his friend' Type . ')'    (rule 38)

	')'            shift, and enter state 120


State 117

	Expr -> Expr . 'times' Expr                         (rule 8)
	Expr -> Expr . 'split' Expr                         (rule 9)
	Expr -> Expr . 'rest' Expr                          (rule 10)
	Expr -> Expr . 'plus' Expr                          (rule 11)
	Expr -> Expr . 'minus' Expr                         (rule 12)
	Expr -> Expr . 'weaker than' Expr                   (rule 13)
	Expr -> Expr . 'stronger than' Expr                 (rule 14)
	Expr -> Expr . 'as weak as' Expr                    (rule 15)
	Expr -> Expr . 'as strong as' Expr                  (rule 16)
	Expr -> Expr . 'same as' Expr                       (rule 17)
	Expr -> Expr . 'different of' Expr                  (rule 18)
	Expr -> Expr . 'both' Expr                          (rule 19)
	Expr -> Expr . 'either' Expr                        (rule 20)
	CaseOf -> 'perhaps' Pattern 'which does' Expr .     (rule 49)

	'and'          reduce using rule 49
	')'            reduce using rule 49
	'and his friend'reduce using rule 49
	'into'         reduce using rule 49
	'?'            reduce using rule 49
	'perhaps'      reduce using rule 49
	'plus'         shift, and enter state 31
			(reduce using rule 49)

	'minus'        shift, and enter state 32
			(reduce using rule 49)

	'times'        shift, and enter state 33
			(reduce using rule 49)

	'split'        shift, and enter state 34
			(reduce using rule 49)

	'rest'         shift, and enter state 35
			(reduce using rule 49)

	'weaker than'  shift, and enter state 36
			(reduce using rule 49)

	'stronger than'shift, and enter state 37
			(reduce using rule 49)

	'as weak as'   shift, and enter state 38
			(reduce using rule 49)

	'as strong as' shift, and enter state 39
			(reduce using rule 49)

	'same as'      shift, and enter state 40
			(reduce using rule 49)

	'different of' shift, and enter state 41
			(reduce using rule 49)

	'both'         shift, and enter state 42
			(reduce using rule 49)

	'either'       shift, and enter state 43
			(reduce using rule 49)

	'then we can conclude'reduce using rule 49
	'rather than'  reduce using rule 49
	%eof           reduce using rule 49


State 118

	Pattern -> '(' Pattern 'and his friend' . Pattern ')'    (rule 52)

	'('            shift, and enter state 99
	'who cares'    shift, and enter state 100
	'yep'          shift, and enter state 17
	'pasyep'       shift, and enter state 18
	'identifier'   shift, and enter state 101
	'integer'      shift, and enter state 20

	Pattern        goto state 119
	Literal        goto state 98

State 119

	Pattern -> '(' Pattern 'and his friend' Pattern . ')'    (rule 52)

	')'            shift, and enter state 123


State 120

	TypeTuple -> '(' Type 'and his friend' Type ')' .    (rule 38)

	')'            reduce using rule 38
	'and his friend'reduce using rule 38
	'identifier'   reduce using rule 38


State 121

	Arg -> 'identifier' '(' Arg 'and his friend' Arg . ')'    (rule 34)

	')'            shift, and enter state 122


State 122

	Arg -> 'identifier' '(' Arg 'and his friend' Arg ')' .    (rule 34)

	'and'          reduce using rule 34
	')'            reduce using rule 34
	'and his friend'reduce using rule 34
	'which does'   reduce using rule 34


State 123

	Pattern -> '(' Pattern 'and his friend' Pattern ')' .    (rule 52)

	')'            reduce using rule 52
	'and his friend'reduce using rule 52
	'which does'   reduce using rule 52


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 58
Number of terminals: 40
Number of non-terminals: 19
Number of states: 124
